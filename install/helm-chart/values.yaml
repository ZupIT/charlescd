postgresqlGlobal: &postgresInfo
  host: &postgresHost charlescd-postgresql
  port: &postgresPort 5432

hostGlobal: &hostGlobal http://charles.info.example
keycloakHost: &keycloakHost http://charles.info.example/keycloak

CharlesApplications:
  butler:
    enabled: true
    name: charlescd-butler
    serviceAccountName: charlescd-butler
    sidecarIstio: 
      enabled: true
    healthCheck:
      path: /healthcheck
      port: 3000
      initialDelay: 60
    image:
      registry: zupcharles
      application: charlescd-butler
    imagePullSecrets: false
    pullPolicy: Always
    service:
      name: charlescd-butler
      type: ClusterIP
      ports:
        - name: http
          port: 3000
    replicaCount: 1
    resources:
      limits:
        cpu: 128m
        memory: 256Mi
      requests:
        cpu: 128m
        memory: 128Mi
    nodeSelector: {}
    tolerations: []
    affinity: {}
    postgresqlWait: true
    #butler envs
    database:
      <<: *postgresInfo
      user: charlescd_butler
      password: 3f2Yq8R4HhDCnefR
      name: charlescd_butler
      ssl: false

  moove:
    enabled: true
    name: charlescd-moove
    sidecarIstio:
      enabled: true
    healthCheck:
      path: /actuator/health
      port: 8080
      initialDelay: 180
    image:
      registry: zupcharles
      application: charlescd-moove
    imagePullSecrets: false
    pullPolicy: Always
    service:
      name: charlescd-moove
      type: ClusterIP
      ports:
        - name: http
          port: 8080
    replicaCount: 1
    resources:
      limits:
        cpu: 1
        memory: 1024Mi
      requests:
        cpu: 128m
        memory: 128Mi
    nodeSelector: {}
    tolerations: []
    affinity: {}
    postgresqlWait: true
    #moove envs
    database:
      <<: *postgresInfo
      user: charlescd_moove
      password: 7Qs2KuM9gYzw48BS
      name: charlescd_moove
    allowedOriginHost: *hostGlobal
    keycloak:
      host: "http://examplename-keycloak-http/keycloak/auth"
      realm: charlescd
      publicClientId: charlescd-client
      clientId: realm-charlescd
      clientSecret: "441cfd37-8443-4f3d-bf6c-ee9861b04e28"
    internalIdmEnabled: true

  villager:
    enabled: true
    name: charlescd-villager
    sidecarIstio:
      enabled: true
    healthCheck:
      path: /health
      port: 8080
      initialDelay: 60
    image:
      registry: zupcharles
      application: charlescd-villager
    imagePullSecrets: false
    pullPolicy: Always
    service:
      name: charlescd-villager
      type: ClusterIP
      ports:
        - name: http
          port: 8080
    replicaCount: 1
    resources:
      limits:
        cpu: 256m
        memory: 512Mi
      requests:
        cpu: 128m
        memory: 128Mi
    nodeSelector: {}
    tolerations: []
    affinity: {}
    postgresqlWait: true
    #villager envs
    buildTimeout: 15
    database:
      <<: *postgresInfo
      user: charlescd_villager
      password: ZkQ67Lnhs2bM3MPN
      name: charlescd_villager

  ui:
    enabled: true
    name: charlescd-ui
    sidecarIstio:
      enabled: true
    healthCheck:
      path: /
      port: 3000
      initialDelay: 20
    image:
      registry: zupcharles
      application: charlescd-ui
    imagePullSecrets: false
    pullPolicy: Always
    service:
      name: charlescd-ui
      type: ClusterIP
      ports:
        - name: http
          port: 3000
    replicaCount: 1
    database: {}
    resources:
      limits:
        cpu: 128m
        memory: 128Mi
      requests:
        cpu: 64m
        memory: 64Mi
    nodeSelector: {}
    tolerations: []
    affinity: {}
    postgresqlWait: false
    #ui envs
    apiHost: *hostGlobal
    authUri: *keycloakHost
    authRealm: charlescd
    authClient: charlescd-client
    isIdmEnabled: "0"
    idmLoginUri: /protocol/openid-connect/auth
    idmLogoutUri: /protocol/openid-connect/logout
    idmRedirectHost: *hostGlobal

  circleMatcher:
    enabled: true
    name: charlescd-circle-matcher
    sidecarIstio:
      enabled: true
    healthCheck:
      path: /actuator/health
      port: 8080
      initialDelay: 120
    image:
      registry: zupcharles
      application: charlescd-circle-matcher
    imagePullSecrets: false
    pullPolicy: Always
    service:
      name: charlescd-circle-matcher
      type: ClusterIP
      ports:
        - name: http
          port: 8080
    replicaCount: 1
    database: {}
    hpa: true
    autoscaling:
      minReplicas: 1
      maxReplicas: 10
      targetMemoryUtilizationPercentage: 80
    resources:
      limits:
        cpu: 500m
        memory: 384Mi
      requests:
        cpu: 500m
        memory: 384Mi
    nodeSelector: {}
    tolerations: []
    affinity: {}
    #Circle matcher envs
    allowedOriginHost: *hostGlobal
    redis:
    # available: redis-standalone, redis-cluster and redis-sentinel
      profile: redis-standalone
      host: charlescd-redis-master
      port: 6379
      password: hb2Fj9MGKjBkZ6zV
      ssl: false
      cluster:
        enabled: false
        nodes: "example"
      sentinel:
        enabled: false
        nodes: "example"
        master: "example"

  compass:
    enabled: true
    name: charlescd-compass
    sidecarIstio:
      enabled: true
    healthCheck:
      path: /health
      port: 8080
      initialDelay: 60
    image:
      registry: zupcharles
      application: charlescd-compass
    imagePullSecrets: false
    pullPolicy: Always
    service:
      name: charlescd-compass
      type: ClusterIP
      ports:
        - name: http
          port: 8080
    replicaCount: 1
    postgresqlWait: true
    resources:
      limits:
        cpu: 128m
        memory: 128Mi
      requests:
        cpu: 64m
        memory: 64Mi
    nodeSelector: {}
    tolerations: []
    affinity: {}
    #compass envs
    database:
      <<: *postgresInfo
      name: charlescd_compass
      user: charlescd_compass
      password: C1UinUu6N0vc
    databaseIgnoreSSL: disable
    pluginsDir: "./plugins"
    dispatchInterval: "15s"
    limits:
      requestPerSecond: "4"
      tokenTTL: "5"
      headersTTL: "5"
    moove:
      user: "Y2hhcmxlc2FkbWluQGFkbWlu"
      auth: "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJrcXkydE1XY2E1VVhaYjdONXZNSEE0b25NRkZqNkVLandSV0tnaTJvQkhNIn0.eyJleHAiOjE2MTEyNTMzMzcsImlhdCI6MTYxMTI0OTczNywianRpIjoiNmU5OWYyZjUtOTBlMS00OGFjLWFlN2QtYWJkMjIyODIwY2FmIiwiaXNzIjoiaHR0cDovL2NoYXJsZXMuaW5mby5leGFtcGxlL2tleWNsb2FrL2F1dGgvcmVhbG1zL2NoYXJsZXNjZCIsImF1ZCI6ImRhcndpbi1jbGllbnQiLCJzdWIiOiJkYThjYTQ5OC1lNDQ5LTQzMjYtYThkZC00ODM5NDI0Y2JkZDAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJjaGFybGVzY2QtY2xpZW50Iiwic2Vzc2lvbl9zdGF0ZSI6IjI5Mzk2ZDZlLWI4ZDctNGU0ZC1hYTI2LWVlYWVlM2M5ODRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNSb290Ijp0cnVlLCJuYW1lIjoiY2hhcmxlc2FkbWluQGFkbWluIGNoYXJsZXNhZG1pbkBhZG1pbiIsInByZWZlcnJlZF91c2VybmFtZSI6ImNoYXJsZXNhZG1pbkBhZG1pbiIsImdpdmVuX25hbWUiOiJjaGFybGVzYWRtaW5AYWRtaW4iLCJmYW1pbHlfbmFtZSI6ImNoYXJsZXNhZG1pbkBhZG1pbiIsImVtYWlsIjoiY2hhcmxlc2FkbWluQGFkbWluIn0.NLzu9222nMb-eyIiKwbznPzSTXe26QQp5cYGWw4MhfTW43gl6bXFAd-YMSXMEz5mmRy73NlW8WWnMKfQpC2FR-3wSKajVTB5_Y2CJC8PTLjXUpcZS2UxvBuV_ANZiINNovGiX87XFNhm9bHZxXzYUhDKqGh2C72G18fZKUTGMCfcTFHhFjxWDx1MEm5AN5JzPNbtcYWmrCMufgTsaQD9pQrHWxr9-8kNgKYff6wMVJLR6YIVpNVy7eHWTTOKwa59BFpw-w45clA3dtcs5cbMQo6GoA52_f5XdyvCZ-llYfvYpT09iPMsekWjG0TTbo2hCA59VKnMZA0r7JtPan9wrQ"
      database:
        <<: *postgresInfo
        name: charlescd_moove
        user: charlescd_moove
        password: 7Qs2KuM9gYzw48BS

  hermes:
    enabled: false
    name: charlescd-hermes
    sidecarIstio:
      enabled: true
    healthCheck:
      path: /health
      port: 8080
      initialDelay: 60
    image:
      registry: zupcharles
      application: charlescd-hermes
    imagePullSecrets: false
    pullPolicy: Always
    service:
      name: charlescd-hermes
      type: ClusterIP
      ports:
        - name: http
          port: 8080
    replicaCount: 1
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    postgresqlWait: true
    #hermes envs
    database:
      <<: *postgresInfo
      user: charlescd_hermes
      password: aGVybWVz
      name: charlescd_hermes
    amqp:
      url: amqp://guest:guest@charlescd-rabbitmq:5672/
      message:
        queue: queue-message
        routingKey: routing-key-message
        exchange: exchange-message
      waitMessage:
        queue: queue-message-wait
        exchange: exchange-message-wait
    publisher:
      time: "@every 5s"
      attempts: 3
    consumer:
      messageRetry:
        expiration: 60000
        attempts: 3
    subscriptionRegisterLimit: 5

postgresql:
  enabled: true
  fullnameOverride: *postgresHost
  initdbScriptsConfigMap: charles-postgres
  pguser: postgres
  pgpassword: postgres

job:
  name: init-db

redis:
  enabled: true
  fullnameOverride: charlescd-redis
  password: "hb2Fj9MGKjBkZ6zV"
  cluster:
    enabled: false

keycloak:
  enabled: true
  postgresql:
    enabled: false
  database:
    <<: *postgresInfo
    name: keycloak
    user: keycloak
    password: DCWYW66Mq2ca6w8u
  charlesHost: *hostGlobal
  fullnameOverride: keycloak
  extraEnv: |
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: DB_USER
      value: "{{ .Values.database.user }}"
    - name: DB_PASSWORD
      value: "{{ .Values.database.password }}"
    - name: DB_VENDOR
      value: "POSTGRES"
    - name: DB_PORT
      value: "{{ .Values.database.port }}"
    - name: DB_ADDR
      value: "{{ .Values.database.host }}"
    - name: DB_DATABASE
      value: "{{ .Values.database.name }}"
    - name: DB_SCHEMA
      value: "public"
    - name: JAVA_OPTS
      value: >-
        -Dkeycloak.migration.action=import
        -Dkeycloak.migration.provider=singleFile
        -Dkeycloak.migration.file=/realm/keycloak.json
        -Dkeycloak.migration.strategy=IGNORE_EXISTING

  securityContext:
    runAsUser: 0
    runAsNonRoot: false

  contextPath: keycloak/auth

  startupScripts:
    contextPath.cli: |
      embed-server --server-config=standalone-ha.xml --std-out=echo
      batch
      {{- if ne .Values.contextPath "auth" }}
      /subsystem=keycloak-server/:write-attribute(name=web-context,value={{ if eq .Values.contextPath "" }}/{{ else }}{{ .Values.contextPath }}{{ end }})
      {{- if eq .Values.contextPath "" }}
      /subsystem=undertow/server=default-server/host=default-host:write-attribute(name=default-web-module,value=keycloak-server.war)
      {{- end }}
      {{- end }}
      /subsystem=keycloak-server/spi=hostname/provider=default:write-attribute(name=properties.frontendUrl, value="{{ .Values.charlesHost }}/{{ .Values.contextPath }}")
      run-batch
      stop-embedded-server

  livenessProbe: |
    httpGet:
      path: {{ if ne .Values.contextPath "" }}/{{ .Values.contextPath }}{{ end }}/
      port: http
    initialDelaySeconds: 300
    timeoutSeconds: 5

  readinessProbe: |
    httpGet:
      path: {{ if ne .Values.contextPath "" }}/{{ .Values.contextPath }}{{ end }}/realms/master
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1

  extraInitContainers: |
    - name: check-db-ready
      image: postgres:9.6.5
      command: ['sh', '-c',
        'until pg_isready -h {{ .Values.database.host }} -p {{ .Values.database.port }};
        do echo waiting for database; sleep 2; done;']
  auth:
    adminPassword: firstpassword

  extraVolumes: |
    - name: realm-secret
      configMap:
        name: keycloak-realm

  extraVolumeMounts: |
    - name: realm-secret
      mountPath: "/realm/"
      readOnly: false

envoy:
  enabled: true
  ui:
    enabled: true
  moove:
    enabled: true
  circlematcher:
    enabled: true
  keycloak:
    enabled: true
  octopipe:
    enabled: true
  compass:
    enabled: true
  hermes:
    enabled: true
  cors:
    enabled: true
    hosts: []
  idm:
    endpoint: "keycloak-http"
    port: 80
    path: /keycloak/auth/realms/charlescd/protocol/openid-connect/userinfo
    protocol: http


ingress:
  host: charles.info.example
  class: nginx
  enabled: true

nginx_ingress_controller:
  enabled: true

ingress-nginx:
  controller:
    service:
      annotations: {}

rabbitmq:
  enabled: false
  fullnameOverride: charlescd-rabbitmq
  auth:
    username: guest
    password: guest
  configuration: |-
    ## Username and password
    ##
    default_user = {{ .Values.auth.username }}
    default_pass = {{ .Values.auth.password }}
    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain }}
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    {{ tpl .Values.extraConfiguration . }}
    {{- if .Values.auth.tls.enabled }}
    ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
    listeners.ssl.default = {{ .Values.service.tlsPort }}
    ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
    ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
    ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
    ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
    {{- end }}
    {{- if .Values.ldap.enabled }}
    auth_backends.1 = rabbit_auth_backend_ldap
    auth_backends.2 = internal
    {{- range $index, $server := .Values.ldap.servers }}
    auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
    {{- end }}
    auth_ldap.port = {{ .Values.ldap.port }}
    auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}
    {{- if .Values.ldap.tls.enabled }}
    auth_ldap.use_ssl = true
    {{- end }}
    {{- end }}
    {{- if .Values.metrics.enabled }}
    ## Prometheus metrics
    ##
    prometheus.tcp.port = 9419
    {{- end }}
    {{- if .Values.memoryHighWatermark.enabled }}
    ## Memory Threshold
    ##
    total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
    vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
    {{- end }}
