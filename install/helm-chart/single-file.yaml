---
# Source: Charles-CD/charts/keycloak/templates/realm-keycloak.yaml
apiVersion: v1
data:
  keycloakimport.json: 
kind: Secret
metadata:
  name: realm-secret
type: Opaque
---
# Source: Charles-CD/charts/keycloak/templates/secret-db.yaml
apiVersion: v1
kind: Secret
metadata:
  name: charlescd-keycloak-db
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.6
    app.kubernetes.io/instance: "charlescd"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  password: ""
  username: "a2V5Y2xvYWs="
---
# Source: Charles-CD/charts/keycloak/templates/secret-keycloak.yaml
apiVersion: v1
kind: Secret
metadata:
  name: charlescd-keycloak-http
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.6
    app.kubernetes.io/instance: "charlescd"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  password: "Zmlyc3RwYXNzd29yZA=="
---
# Source: Charles-CD/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: charlescd-mongodb
  namespace: charles
  labels:
    app: mongodb
    chart: mongodb-7.14.2
    release: "charlescd"
    heritage: "Helm"
type: Opaque
data:
  mongodb-root-password:  "b2N0b3BpcGU="
  mongodb-password:  "Zmlyc3RwYXNzd29yZA=="
---
# Source: Charles-CD/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: charlescd-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.0
    release: "charlescd"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "Zmlyc3RwYXNzd29yZA=="
---
# Source: Charles-CD/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: charlescd-redis
  labels:
    app: charlescd-redis
    chart: redis-10.5.12
    release: "charlescd"
    heritage: "Helm"
type: Opaque
data:
  redis-password: "aGIyRmo5TUdLakJrWjZ6Vg=="
---
# Source: Charles-CD/templates/charlescd-butler-secret.yaml
apiVersion: v1
data:
  encryption-key: QzYzOUE1NzJFMTRENTA3NUM1MjZGRERENDNFNEVDRjZCMDk1RUExNzc4M0QzMkVGM0QyNzEwQUY5RjM1OURENA==
kind: Secret
metadata:
  name: deploy-aes256-key
type: Opaque
---
# Source: Charles-CD/templates/charlescd-moove-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: application-aes256-key
type: Opaque
data:
  encryption-key: OGVhMzY4OGYtYmUxOS00YWU2LTljNmMtZDFhNjAzNjAyYTJm
---
# Source: Charles-CD/charts/keycloak/templates/configmap-sh.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: charlescd-keycloak-sh
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.6
    app.kubernetes.io/instance: "charlescd"
    app.kubernetes.io/managed-by: Helm
data:
  keycloak.sh: |
    #!/usr/bin/env bash

    set -o errexit
    set -o nounset

    exec /opt/jboss/tools/docker-entrypoint.sh -b 0.0.0.0 -Dkeycloak.migration.action=import -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=/realm/keycloakimport.json -Dkeycloak.migration.strategy=OVERWRITE_EXISTING -c standalone.xml
---
# Source: Charles-CD/charts/keycloak/templates/configmap-startup.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: charlescd-keycloak-startup
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.6
    app.kubernetes.io/instance: "charlescd"
    app.kubernetes.io/managed-by: Helm
data:
  keycloak.cli: |
    embed-server --std-out=echo
    batch
    # Changes the base path to be /keycloak.basepath instead of /auth
    /subsystem=keycloak-server:write-attribute(name=web-context,value=keycloak/auth)
  
    ## Sets the node identifier to the node name (= pod name). Node identifiers have to be unique. They can have a
    ## maximum length of 23 characters. Thus, the chart's fullname template truncates its length accordingly.
    /subsystem=transactions:write-attribute(name=node-identifier, value=${jboss.node.name})
    
    
    # Allow log level to be configured via environment variable
    /subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    /subsystem=logging/root-logger=ROOT:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    
    # Add dedicated eventsListener config element to allow configuring elements.
    /subsystem=keycloak-server/spi=eventsListener:add()
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:add(enabled=true)
    
    # Propagate success events to INFO instead of DEBUG, to expose successful logins for log analysis
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.success-level,value=info)
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.error-level,value=warn)
    
    
    # Configure datasource to use explicit query timeout in seconds
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=query-timeout,value=${env.DB_QUERY_TIMEOUT:300})
    
    # Configure datasource to connection before use
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=validate-on-match,value=${env.DB_VALIDATE_ON_MATCH:true})
    
    # Configure datasource to try all other connections before failing
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=use-fast-fail,value=${env.DB_USE_CAST_FAIL:false})
    
    

    run-batch
    stop-embedded-server
---
# Source: Charles-CD/charts/nginx/templates/nginx-conf.yaml
apiVersion: v1
data:
  nginx.conf: |-
    user       nginx;
    worker_processes  5;
    worker_rlimit_nofile 8192;
    events {
        worker_connections  4096;
    }

    http {
        index    index.html index.htm index.php;
        default_type application/octet-stream;
        log_format main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        sendfile on;
        tcp_nopush   on;
        server_names_hash_bucket_size 128;
        # server {
        #     listen 80;
        #     server_name charles-prod.continuousplatform.com;
        #     return 301 https://charles-prod.continuousplatform.com$request_uri;
        # }
        server {
            listen 80;
            
            location / {
                proxy_http_version 1.1;
                proxy_pass http://charlescd-ui:3000;
            }
            
            location /moove/ {
                proxy_http_version 1.1;
                proxy_pass http://charlescd-moove:8080/;
            }
            
            location /octopipe/ {
                proxy_http_version 1.1;
                proxy_pass http://charlescd-octopipe:8080/;
            }
            
            location /charlescd-circle-matcher {
                proxy_http_version 1.1;
                proxy_pass http://charlescd-circle-matcher:8080/;
            }
            
            location ^~ /keycloak/ {
                proxy_http_version 1.1;
                proxy_set_header X-Forwarded-For $host;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection ‘upgrade’;
                proxy_set_header Host $host;
                proxy_pass      http://charlescd-keycloak-http:8080;
            }
        }
    }
kind: ConfigMap
metadata:
  name: confnginx
---
# Source: Charles-CD/charts/postgresql/templates/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: charlescd-postgresql-init-scripts
  labels:
    app: postgresql
    chart: postgresql-8.9.0
    release: "charlescd"
    heritage: "Helm"
data:
  charlescd-extensions.sh: |-
    #!/bin/bash
    export PGUSER=postgres
    export PGPASSWORD=firstpassword
    psql -c "CREATE DATABASE charlescd_butler"
    psql -c "CREATE USER charlescd_butler WITH PASSWORD '3f2Yq8R4HhDCnefR'"
    psql -c "ALTER DATABASE charlescd_butler OWNER TO charlescd_butler"
    psql -d charlescd_butler -c "CREATE EXTENSION IF NOT EXISTS pgcrypto"
    psql -c "CREATE DATABASE charlescd_moove"
    psql -c "CREATE USER charlescd_moove WITH PASSWORD '7Qs2KuM9gYzw48BS'"
    psql -c "ALTER DATABASE charlescd_moove OWNER TO charlescd_moove"
    psql -d charlescd_moove -c "CREATE EXTENSION IF NOT EXISTS pgcrypto"
    psql -c "CREATE DATABASE charlescd_villager"
    psql -c "CREATE USER charlescd_villager WITH PASSWORD 'ZkQ67Lnhs2bM3MPN'"
    psql -c "ALTER DATABASE charlescd_villager OWNER TO charlescd_villager"
    psql -d charlescd_villager -c "CREATE EXTENSION IF NOT EXISTS pgcrypto"
    psql -c "CREATE DATABASE keycloak"
    psql -c "CREATE USER keycloak WITH PASSWORD 'DCWYW66Mq2ca6w8u'"
    psql -c "ALTER DATABASE keycloak OWNER TO keycloak"
---
# Source: Charles-CD/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: charlescd-redis
  labels:
    app: charlescd-redis
    chart: redis-10.5.12
    heritage: Helm
    release: charlescd
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
# Source: Charles-CD/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: charlescd-redis-health
  labels:
    app: charlescd-redis
    chart: redis-10.5.12
    heritage: Helm
    release: charlescd
data:
  ping_readiness_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_PASSWORD --no-auth-warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_PASSWORD --no-auth-warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD --no-auth-warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD --no-auth-warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: Charles-CD/charts/mongodb/templates/pvc-standalone.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  labels:
    app: mongodb
    chart: mongodb-7.14.2
    heritage: Helm
    release: charlescd
  name: charlescd-mongodb
  namespace: charles
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: Charles-CD/charts/mongodb/templates/serviceaccount.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: charlescd-mongodb
  namespace: charles
  labels:
    app: mongodb
    chart: mongodb-7.14.2
    release: "charlescd"
    heritage: "Helm"
secrets:
  - name: charlescd-mongodb
---
# Source: Charles-CD/charts/octopipe-charlescd/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
  name: charlescd-octopipe
  namespace: charles
---
# Source: Charles-CD/charts/octopipe-charlescd/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: charlescd-octopipe-role
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  - configmaps
  - events
  - replicationcontrollers
  - serviceaccounts
  - pods/log
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - secrets
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - list
  - get
- apiGroups:
  - apps
  resources:
  - controllerrevisions
  - statefulsets
  verbs:
  - list
- apiGroups:
  - extensions
  - apps
  resources:
  - deployments
  - replicasets
  - ingresses
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services/proxy
  - pods/portforward
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
# Source: Charles-CD/charts/octopipe-charlescd/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
  name: charlescd-octopipe-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: charlescd-octopipe-role
subjects:
- kind: ServiceAccount
  name: charlescd-octopipe
  namespace: charles
---
# Source: Charles-CD/charts/keycloak/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: charlescd-keycloak-headless
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.6
    app.kubernetes.io/instance: "charlescd"
    app.kubernetes.io/managed-by: Helm
    service: headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "charlescd"
---
# Source: Charles-CD/charts/keycloak/templates/service-http.yaml
apiVersion: v1
kind: Service
metadata:
  name: charlescd-keycloak-http
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.6
    app.kubernetes.io/instance: "charlescd"
    app.kubernetes.io/managed-by: Helm
    service: http
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "charlescd"
---
# Source: Charles-CD/charts/mongodb/templates/svc-standalone.yaml
apiVersion: v1
kind: Service
metadata:
  name: charlescd-mongodb
  namespace: charles
  labels:
    app: mongodb
    chart: mongodb-7.14.2
    release: "charlescd"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: mongodb
      port: 27017
      targetPort: mongodb
  selector:
    app: mongodb
    release: "charlescd"
---
# Source: Charles-CD/charts/nginx/templates/nginx-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: nginx
spec:
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 30803
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer: {}
---
# Source: Charles-CD/charts/octopipe-charlescd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: charlescd-octopipe
    service: charlescd-octopipe
  name: charlescd-octopipe
  namespace: charles
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
    
  selector:
    app: charlescd-octopipe
---
# Source: Charles-CD/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: charlescd-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.9.0
    release: "charlescd"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "charlescd"
---
# Source: Charles-CD/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: charlescd-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.0
    release: "charlescd"
    heritage: "Helm"
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "charlescd"
    role: master
---
# Source: Charles-CD/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: charlescd-redis-headless
  labels:
    app: charlescd-redis
    chart: redis-10.5.12
    release: charlescd
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: charlescd-redis
    release: charlescd
---
# Source: Charles-CD/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: charlescd-redis-master
  labels:
    app: charlescd-redis
    chart: redis-10.5.12
    release: charlescd
    heritage: Helm
spec:
  type: LoadBalancer
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: charlescd-redis
    release: charlescd
    role: master
---
# Source: Charles-CD/charts/redis/templates/redis-slave-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: charlescd-redis-slave
  labels:
    app: charlescd-redis
    chart: redis-10.5.12
    release: charlescd
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: charlescd-redis
    release: charlescd
    role: slave
---
# Source: Charles-CD/templates/charlescd-butler-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: charlescd-butler
    service: charlescd-butler
  name: charlescd-butler
  namespace: charles
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
    
  type: ClusterIP
  selector:
    app: charlescd-butler
---
# Source: Charles-CD/templates/charlescd-circle-matcher-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: charlescd-circle-matcher
    service: charlescd-circle-matcher
  name: charlescd-circle-matcher
  namespace: charles
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
    
  selector:
    app: charlescd-circle-matcher
  type: ClusterIP
---
# Source: Charles-CD/templates/charlescd-moove-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: charlescd-moove
    service: charlescd-moove
  name: charlescd-moove
  namespace: charles
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
    
  selector:
    app: charlescd-moove
  type: ClusterIP
---
# Source: Charles-CD/templates/charlescd-ui-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: charlescd-ui
    service: charlescd-ui
  name: charlescd-ui
  namespace: charles
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
    
  selector:
    app: charlescd-ui
  type: ClusterIP
---
# Source: Charles-CD/templates/charlescd-villager-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: charlescd-villager
    service: charlescd-villager
  name: charlescd-villager
  namespace: charles
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
    
  type: ClusterIP
  selector:
    app: charlescd-villager
---
# Source: Charles-CD/charts/mongodb/templates/deployment-standalone.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: charlescd-mongodb
  namespace: charles
  labels:
    app: mongodb
    chart: mongodb-7.14.2
    release: "charlescd"
    heritage: "Helm"
spec:
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: mongodb
      release: "charlescd"
  template:
    metadata:
      labels:
        app: mongodb
        release: "charlescd"
        chart: mongodb-7.14.2
    spec:
      serviceAccountName: charlescd-mongodb
      securityContext:
        fsGroup: 1001      
      initContainers:
      containers:
        - name: charlescd-mongodb
          image: docker.io/bitnami/mongodb:4.2.7-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: charlescd-mongodb
                  key: mongodb-password
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: charlescd-mongodb
                  key: mongodb-root-password
            - name: MONGODB_USERNAME
              value: "mongodb"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DATABASE
              value: "octopipe"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/mongodb
              subPath: 
          resources:
            {}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: charlescd-mongodb
---
# Source: Charles-CD/charts/nginx/templates/nginx.deployment.yaml
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx     
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1 # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      # unlike pod-nginx.yaml, the name is not included in the meta data as a unique name is
      # generated from the deployment name
      labels:
        app: nginx     
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
          - containerPort: 80        
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-config
          configMap:
            name: confnginx
---
# Source: Charles-CD/charts/octopipe-charlescd/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: charlescd-octopipe
  namespace: charles
  labels:
    app: charlescd-octopipe
    version: charlescd-octopipe
spec:
  replicas: 
  selector:
    matchLabels:
      app: charlescd-octopipe
      version: charlescd-octopipe
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'true' 
      labels:
        app: charlescd-octopipe
        version: charlescd-octopipe
    spec:
      serviceAccountName: charlescd-octopipe
      
      containers:
        - name: octopipe
          image: "zupcharles/charlescd-octopipe:latest"
          
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          
          imagePullPolicy: Always
          
          env:
          - name: APP_PORT
            value: "8080"
          - name: DB_URL
            value: "mongodb://root:octopipe@charlescd-mongodb:27017"
          - name: KUBECONFIG
            value: "IN_CLUSTER"
          - name: TIMEOUT_RESOURCE_VERIFICATION
            value: "300"
          
          
          
                    
          resources:
            limits:
              cpu: 256m
              memory: 256Mi
            requests:
              cpu: 128m
              memory: 128Mi
     
     
     
     
      imagePullSecrets:
      - name: realwavelab-registry
---
# Source: Charles-CD/templates/charlescd-butler-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: charlescd-butler
  namespace: charles
  labels:
    app: charlescd-butler
    version: charlescd-butler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: charlescd-butler
      version: charlescd-butler
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'false' 
      labels:
        app: charlescd-butler
        version: charlescd-butler
    spec:
      containers:
        - name: charlescd-butler
          image: zupcharles/charlescd-butler:0.2.14
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthcheck
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthcheck
              port: 3000
              scheme: HTTP  
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1   
          imagePullPolicy: Always
          env:
            - name: DATABASE_HOST
              value: charlescd-postgresql
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_USER
              value: charlescd_butler
            - name: DATABASE_PASS
              value: 3f2Yq8R4HhDCnefR
            - name: DATABASE_NAME
              value: charlescd_butler
            - name: DATABASE_SSL
              value: "false"
            - name: MOOVE_URL
              value: "http://charlescd-moove:8080"
            - name: DARWIN_NOTIFICATION_URL
              value: "http://charlescd-butler.charles.svc.cluster.local:3000/notifications"
            - name: DARWIN_UNDEPLOYMENT_CALLBACK
              value: "http://charlescd-butler.charles.svc.cluster.local:3000/notifications/undeployment"
            - name: DARWIN_DEPLOYMENT_CALLBACK
              value: "http://charlescd-butler.charles.svc.cluster.local:3000/notifications/deployment"
            - name: DARWIN_ISTIO_DEPLOYMENT_CALLBACK
              value: "http://charlescd-butler.charles.svc.cluster.local:3000/notifications/istio-deployment"
            - name: OCTOPIPE_URL
              value: "http://charlescd-octopipe:8080/"
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: deploy-aes256-key
                  key: encryption-key
          resources:
            limits:
              cpu: 128m
              memory: 256Mi
            requests:
              cpu: 128m
              memory: 128Mi
---
# Source: Charles-CD/templates/charlescd-circle-matcher-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: charlescd-circle-matcher
  namespace: charles
  labels:
    app: charlescd-circle-matcher
    version: charlescd-circle-matcher
spec:
  replicas: 1
  selector:
    matchLabels:
      app: charlescd-circle-matcher
      version: charlescd-circle-matcher
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'false' 
      labels:
        app: charlescd-circle-matcher
        version: charlescd-circle-matcher
    spec:
      containers:
        - name: charlescd-circle-matcher
          image: zupcharles/charlescd-circle-matcher:0.2.14
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP  
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1   
          imagePullPolicy: Always
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "redis-standalone"
            - name: SPRING_REDIS_HOST
              value: charlescd-redis-master
            - name: SPRING_REDIS_PORT
              value: "6379"
            - name: SPRING_REDIS_PASSWORD
              value: hb2Fj9MGKjBkZ6zV
            - name: SPRING_REDIS_SSL
              value: "false"
            - name: ALLOWED_ORIGINS
              value: http://charles.info.example
          resources:
            limits:
              cpu: 256m
              memory: 256Mi
            requests:
              cpu: 128m
              memory: 128Mi
---
# Source: Charles-CD/templates/charlescd-moove-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: charlescd-moove
  namespace: charles
  labels:
    app: charlescd-moove
    version: charlescd-moove
spec:
  replicas: 1
  selector:
    matchLabels:
      app: charlescd-moove
      version: charlescd-moove
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'false' 
      labels:
        app: charlescd-moove
        version: charlescd-moove
    spec:
      containers:
        - name: charlescd-moove
          image: zupcharles/charlescd-moove:0.2.14
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP  
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1   
          imagePullPolicy: Always
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "k8s"
            - name: DB_URL
              value: "jdbc:postgresql://charlescd-postgresql:5432/charlescd_moove"
            - name: DB_USERNAME
              value: "charlescd_moove"
            - name: DB_PASSWORD
              value: "7Qs2KuM9gYzw48BS"
            - name: KEYCLOCK_REALM
              value: "charlescd"
            - name: KEYCLOAK_SERVER_URL
              value: "http://nginx/keycloak/auth"
            - name: KEYCLOAK_CLIENT_ID
              value: "realm-charlescd"
            - name: KEYCLOAK_CLIENT_SECRET
              value: "a79e9316-2196-41d1-8dfe-98cc48241fe3"
            - name: ORIGIN_HOSTS
              value: "http://localhost:3000,http://localhost:3001,http://localhost:8081,http://localhost:8080,http://charles.info.example"
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: "application-aes256-key"
                  key: "encryption-key"
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 128m
              memory: 128Mi
---
# Source: Charles-CD/templates/charlescd-ui-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: charlescd-ui
  namespace: charles
  labels:
    app: charlescd-ui
    version: charlescd-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: charlescd-ui
      version: charlescd-ui
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'false' 
      labels:
        app: charlescd-ui
        version: charlescd-ui
    spec:
      containers:
        - name: charlescd-ui
          image: zupcharles/charlescd-ui:0.2.14
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP  
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1 
          imagePullPolicy: Always
          env:
            - name: REACT_APP_API_URI
              value: http://charles.info.example
            - name: REACT_APP_AUTH_URI
              value: http://charles.info.example/keycloak
            - name: REACT_APP_AUTH_REALM
              value: charlescd
            - name: REACT_APP_AUTH_CLIENT_ID
              value: charlescd-client
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 64m
              memory: 64Mi
---
# Source: Charles-CD/templates/charlescd-villager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: charlescd-villager
  namespace: charles
  labels:
    app: charlescd-villager
    version: charlescd-villager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: charlescd-villager
      version: charlescd-villager
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'false' 
      labels:
        app: charlescd-villager
        version: charlescd-villager
    spec:
      containers:
        - name: charlescd-villager
          image: zupcharles/charlescd-villager:0.2.14
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP  
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1   
          imagePullPolicy: Always
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "k8s"
            - name: CHARLES_VILLAGER_DB_URI
              value: "jdbc:postgresql://charlescd-postgresql:5432/charlescd_villager"
            - name: CHARLES_VILLAGER_DB_USERNAME
              value: "charlescd_villager"
            - name: CHARLES_VILLAGER_DB_PASSWORD
              value: "ZkQ67Lnhs2bM3MPN"
            - name: CHARLES_BUILD_TIMEOUT
              value: "15"
            - name: CHARLES_villager_ORGANIZATION
              value: zup
            - name: CRYPT_KEY
              value: pvMPbPPNNB
          resources:
            limits:
              cpu: 256m
              memory: 512Mi
            requests:
              cpu: 128m
              memory: 128Mi
---
# Source: Charles-CD/charts/keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: charlescd-keycloak
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.6
    app.kubernetes.io/instance: "charlescd"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: "charlescd"
  replicas: 1
  serviceName: charlescd-keycloak-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/instance: "charlescd"
      annotations:
        checksum/config-sh: dcfdbcc04b7fd4e3524782de5fe68b27b8a62cfbfb730d9acaa145192d4381de
        checksum/config-startup: 35153660db37e6edf18eab79b6528871b4fd69cfc316f31879274f7396c0f8cb
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      restartPolicy: Always
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
      containers:
        - name: keycloak
          image: "jboss/keycloak:9.0.2"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          command:
            - /scripts/keycloak.sh
          env:
            - name: KEYCLOAK_USER
              value: keycloak
            - name: KEYCLOAK_PASSWORD_FILE
              value: /secrets/password
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0"
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            
            - name: DB_VENDOR
              value: "postgres"
            - name: DB_ADDR
              value: "mykeycloak"
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              value: "keycloak"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: charlescd-keycloak-db
                  key: "username"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: charlescd-keycloak-db
                  key: "password"
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: DB_USER
              value: "keycloak"
            - name: DB_PASSWORD
              value: "DCWYW66Mq2ca6w8u"
            - name: DB_VENDOR
              value: "POSTGRES"
            - name: DB_PORT
              value: "5432"
            - name: DB_ADDR
              value: "charlescd-postgresql"
            - name: DB_DATABASE
              value: "keycloak"
            - name: DB_SCHEMA
              value: "public"
            
          volumeMounts:
            - name: sh
              mountPath: /scripts
              readOnly: true
            - name: secrets
              mountPath: /secrets
              readOnly: true
            - name: startup
              mountPath: /opt/jboss/startup-scripts
              readOnly: true
            - name: realm-secret
              mountPath: "/realm/"
              readOnly: true
            
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /keycloak/auth/
              port: http
            initialDelaySeconds: 300
            timeoutSeconds: 5
            
          readinessProbe:
            httpGet:
              path: /keycloak/auth/realms/master
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
            
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: keycloak
                  app.kubernetes.io/instance: "charlescd"
                matchExpressions:
                  - key: role
                    operator: NotIn
                    values:
                      - test
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: keycloak
                    app.kubernetes.io/instance: "charlescd"
                  matchExpressions:
                    - key: role
                      operator: NotIn
                      values:
                        - test
                topologyKey: failure-domain.beta.kubernetes.io/zone
        
      terminationGracePeriodSeconds: 60
      volumes:
        - name: sh
          configMap:
            name: charlescd-keycloak-sh
            defaultMode: 0555
        - name: secrets
          secret:
            secretName: charlescd-keycloak-http
        - name: startup
          configMap:
            name: charlescd-keycloak-startup
            defaultMode: 0555
        - name: realm-secret
          secret:
            secretName: realm-secret
---
# Source: Charles-CD/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: charlescd-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.0
    release: "charlescd"
    heritage: "Helm"
  annotations:
spec:
  serviceName: charlescd-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "charlescd"
      role: master
  template:
    metadata:
      name: charlescd-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.9.0
        release: "charlescd"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: charlescd-postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r77
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: charlescd-postgresql
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: custom-init-scripts
          configMap:
            name: charlescd-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: Charles-CD/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: charlescd-redis-master
  labels:
    app: charlescd-redis
    chart: redis-10.5.12
    release: charlescd
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: charlescd-redis
      release: charlescd
      role: master
  serviceName: charlescd-redis-headless
  template:
    metadata:
      labels:
        app: charlescd-redis
        chart: redis-10.5.12
        release: charlescd
        role: master
      annotations:
        checksum/health: c53d81a64fd6672631bf377b386ec051f153e768dcf8511dcf8d32b091e54f7a
        checksum/configmap: c408d6e1d0275ae8659f14cc03bf4420031e7bee98a378c0d58e079af186da3b
        checksum/secret: c5c84be62517872da3e6470a44b51995810c924205771a4ca50bf21ce2650b56
    spec:      
      securityContext:
        fsGroup: 1001
      serviceAccountName: "default"
      containers:
      - name: charlescd-redis
        image: "docker.io/bitnami/redis:5.0.8-debian-10-r7"
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsUser: 1001
        command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
          fi
          if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--requirepass" "${REDIS_PASSWORD}")
          ARGS+=("--masterauth" "${REDIS_PASSWORD}")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: charlescd-redis
              key: redis-password
        - name: REDIS_PORT
          value: "6379"
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 5
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 5
        resources:
          null
        volumeMounts:
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
          subPath: 
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: redis-tmp-conf
          mountPath: /opt/bitnami/redis/etc/
      volumes:
      - name: health
        configMap:
          name: charlescd-redis-health
          defaultMode: 0755
      - name: config
        configMap:
          name: charlescd-redis
      - name: redis-tmp-conf
        emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: charlescd-redis
          release: charlescd
          heritage: Helm
          component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "2Gi"
        
        selector:
  updateStrategy:
    type: RollingUpdate
---
# Source: Charles-CD/charts/redis/templates/redis-slave-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: charlescd-redis-slave
  labels:
    app: charlescd-redis
    chart: redis-10.5.12
    release: charlescd
    heritage: Helm
spec:
  replicas: 2
  serviceName: charlescd-redis-headless
  selector:
    matchLabels:
      app: charlescd-redis
      release: charlescd
      role: slave
  template:
    metadata:
      labels:
        app: charlescd-redis
        release: charlescd
        chart: redis-10.5.12
        role: slave
      annotations:
        checksum/health: c53d81a64fd6672631bf377b386ec051f153e768dcf8511dcf8d32b091e54f7a
        checksum/configmap: c408d6e1d0275ae8659f14cc03bf4420031e7bee98a378c0d58e079af186da3b
        checksum/secret: c5c84be62517872da3e6470a44b51995810c924205771a4ca50bf21ce2650b56
    spec:      
      securityContext:
        fsGroup: 1001
      serviceAccountName: "default"
      containers:
      - name: charlescd-redis
        image: docker.io/bitnami/redis:5.0.8-debian-10-r7
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsUser: 1001
        command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
            export REDIS_MASTER_PASSWORD=$password_aux
          fi
          if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
          fi
          if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
          ARGS+=("--requirepass" "${REDIS_PASSWORD}")
          ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
          /run.sh "${ARGS[@]}"
        env:
        - name: REDIS_REPLICATION_MODE
          value: slave
        - name: REDIS_MASTER_HOST
          value: charlescd-redis-master-0.charlescd-redis-headless.charles.svc.cluster.local
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_MASTER_PORT_NUMBER
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: charlescd-redis
              key: redis-password
        - name: REDIS_MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: charlescd-redis
              key: redis-password
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local_and_master.sh 5
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local_and_master.sh 5
        resources:
          null
        volumeMounts:
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: redis-tmp-conf
          mountPath: /opt/bitnami/redis/etc
      volumes:
      - name: health
        configMap:
          name: charlescd-redis-health
          defaultMode: 0755
      - name: config
        configMap:
          name: charlescd-redis
      - name: sentinel-tmp-conf
        emptyDir: {}
      - name: redis-tmp-conf
        emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: charlescd-redis
          release: charlescd
          heritage: Helm
          component: slave
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        
        selector:
  updateStrategy:
    type: RollingUpdate
