{
	"info": {
		"_postman_id": "83614335-398a-4d53-bc2f-e559201d8379",
		"name": "Charles Butler",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Configurations",
			"item": [
				{
					"name": "Create octopipe cd configuration Generic cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57938e8f-0111-4237-ae90-ad424e55c4f0",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5223b205-bf42-4960-a8e3-522bf38792cc",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"provider\": \"GENERIC\",\n\t\t\"clientCertificate\": \"cert-data\",\n\t\t\"host\": \"https://kube.cluster.com\",\n\t\t\"gitToken\": \"githubtoken\",\n\t\t\"namespace\": \"darwin\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create octopipe cd configuration EKS cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c93c73e3-8dee-40ab-97e4-36fb1c1072b4",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "378b3a06-8e30-4104-8969-85be9663e877",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"gitToken\": \"git-token\",\n\t\t\"provider\": \"EKS\",\n\t\t\"caData\": \"ca-data\",\n\t\t\"awsSID\": \"aws-sid\",\n\t\t\"awsSecret\": \"aws-secret\",\n\t\t\"awsRegion\": \"aws-region\",\n\t\t\"awsClusterName\": \"cluster-name\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create octopipe cd configuration DEFAULT cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d95bf27f-718d-4370-bb1b-8f20949026fd",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6d7f0034-8b3d-4ddc-8194-45d105daba81",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"gitToken\": \"git-token\",\n\t\t\"provider\": \"DEFAULT\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create spinnaker cd configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0920942-3302-4ca5-ab87-9ec4f1d26187",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "804ebe45-247f-4049-a4a9-8362f51bf381",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"account\":\"some-account\",\n\t\"namespace\":\"some-namespace\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"SPINNAKER\",\n\t\"configurationData\": {\n\t\t\"account\": \"account\",\n\t\t\"gitAccount\": \"gitaccount\",\n\t\t\"url\": \"http://localhost:8883/spinnaker\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff1ff684-e12c-469f-844e-3483f6ae627b",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Deployments",
			"item": [
				{
					"name": "Create Default Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac887d0e-48c7-4dd4-9dd4-345c9f6d36af",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc85cce7-3834-4a99-b67b-ef7de609ecd2",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"applicationName\": \"{{applicationName}}\",\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"description\": \"\",\n    \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\" \n     \n}"
						},
						"url": {
							"raw": "http://localhost:3000/deployments/default",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Routed Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34e0a464-9eaf-49ba-87f0-285f3472465a",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d9b3da8d-83c0-493b-9579-4478868e7eeb",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"abobora\": true,\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"circle\": {\n\t\t\"headerValue\": \"123123-4324234-42342-3423\"\n\t},\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\"    \n}"
						},
						"url": {
							"raw": "http://localhost:3000/v2/deployments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"v2",
								"deployments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deployments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8991d8a0-2011-49ed-91e6-6ac4192a6668",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/deployments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deployment by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c7c6811-2d05-4cdf-97d0-06c522ef6f3e",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/deployments/{{deploymentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"{{deploymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Undeployment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eef7d9f9-a045-4f32-81be-4fd8349f8c6d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d86fe8d8-be14-4957-8c52-3e5cc2d35ae5",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"",
									"postman.setGlobalVariable(\"componentDeploymentId\", response.modulesUndeployments[0].componentsUndeployments[0].componentDeployment)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"authorId\": \"{{authorId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/deployments/{{deploymentId}}/undeploy",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"{{deploymentId}}",
								"undeploy"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Modules",
			"item": [
				{
					"name": "Get Modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e0bfdac-12f1-4ac6-acd8-152308325b19",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})",
									"const response = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"moduleId\", response[0][\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/modules",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Module by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed9514b6-9f1a-4aca-b4ee-072c50edfa5d",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/modules/{{moduleId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules",
								"{{moduleId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Components",
			"item": [
				{
					"name": "Get Component Queue by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "457bb5f8-3a82-4059-81e0-ed77b14adadf",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"componentQueueId\", response[0][\"id\"]);",
									"const componentDeployment = postman.getGlobalVariable(\"componentDeploymentId\")",
									"",
									"const undeploymentId = response.filter(e => e.componentDeploymentId === componentDeployment)",
									"postman.setGlobalVariable(\"componentUndeploymentQueueId\", undeploymentId[undeploymentId.length -1].id)",
									"",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/components/{{componentId}}/queue",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"components",
								"{{componentId}}",
								"queue"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Notify Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e4ec9fc-5aa1-40c9-8712-5754dd5320c6",
								"exec": [
									"pm.test(\"Status no content\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"SUCCEEDED\"\n}"
						},
						"url": {
							"raw": "http://localhost:3000/notifications/deployment?queuedDeploymentId={{componentQueueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"deployment"
							],
							"query": [
								{
									"key": "queuedDeploymentId",
									"value": "{{componentQueueId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Notify Undeployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5501f343-aa3d-4079-b732-5c5247b04270",
								"exec": [
									"pm.test(\"Status no content\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"SUCCEEDED\"\n}"
						},
						"url": {
							"raw": "http://localhost:3000/notifications/undeployment?queuedUndeploymentId={{componentUndeploymentQueueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"undeployment"
							],
							"query": [
								{
									"key": "queuedUndeploymentId",
									"value": "{{componentUndeploymentQueueId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Configurations Cleanup",
			"item": [
				{
					"name": "Create octopipe cd configuration Generic cluster Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "076c8998-57b9-45c3-8153-979b730ddcc5",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "be7ba088-63fd-4738-b766-5a8c2c9e91db",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"provider\": \"GENERIC\",\n\t\t\"clientCertificate\": \"cert-data\",\n\t\t\"host\": \"https://kube.cluster.com\",\n\t\t\"gitToken\": \"githubtoken\",\n\t\t\"namespace\": \"darwin\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "691e00a3-e29e-4bfc-a221-49f5528be0cb",
								"exec": [
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"url": {
							"raw": "localhost:3000/configurations/cd/{{cdConfigurationId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd",
								"{{cdConfigurationId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "V2",
			"item": [
				{
					"name": "Create spinnaker cd configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eac90715-5cfb-448a-8314-c6f4a80bcabd",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a3ef9851-5ebd-4594-8165-9184afe3de77",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"account\":\"some-account\",\n\t\"namespace\":\"some-namespace\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"SPINNAKER\",\n\t\"configurationData\": {\n\t\t\"account\": \"account\",\n\t\t\"gitAccount\": \"gitaccount\",\n\t\t\"url\": \"http://localhost:8883/spinnaker\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34e0a464-9eaf-49ba-87f0-285f3472465a",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d9b3da8d-83c0-493b-9579-4478868e7eeb",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('moduleId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"circle\": {\n\t\t\"headerValue\": \"b46fd548-0082-4021-ba80-a50703c44a3b\"\n\t},\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"e82f9bbb-169b-4b11-b48f-7f4fc7561651\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                },\n                {\n                    \"componentId\": \"b82f9bbb-169b-4b11-b48f-7f4fc7561651\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name2\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"cdConfigurationId\": \"12c3fe24-59a3-4448-9c6d-fd506aee5e3e\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\"    \n}"
						},
						"url": {
							"raw": "http://localhost:3000/v2/deployments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"v2",
								"deployments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Notify Deployment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"SUCCEEDED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/v2/notifications/deployment/{{deploymentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"v2",
								"notifications",
								"deployment",
								"{{deploymentId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}