{
	"info": {
		"_postman_id": "99f23536-c82a-42b6-a36f-b6f2dd9a4c6b",
		"name": "Charles Butler",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Configurations",
			"item": [
				{
					"name": "Create octopipe cd configuration Generic cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3abb15e-14d8-439a-9d2d-9444692e24c3",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "32097b27-ef02-488f-939a-d1ebb7d25064",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"provider\": \"GENERIC\",\n\t\t\"clientCertificate\": \"cert-data\",\n\t\t\"host\": \"https://kube.cluster.com\",\n\t\t\"gitToken\": \"githubtoken\",\n\t\t\"namespace\": \"darwin\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create octopipe cd configuration EKS cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5077ad3a-26dd-44cd-b0f1-d4ad1a5fd23a",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e6efc2b4-cc75-4a22-a6a7-b677a306e9e5",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"gitToken\": \"git-token\",\n\t\t\"provider\": \"EKS\",\n\t\t\"caData\": \"ca-data\",\n\t\t\"awsSID\": \"aws-sid\",\n\t\t\"awsSecret\": \"aws-secret\",\n\t\t\"awsRegion\": \"aws-region\",\n\t\t\"awsClusterName\": \"cluster-name\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create octopipe cd configuration DEFAULT cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71c47939-a6c8-4089-a5ad-ada3e555e111",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f95317d6-4596-4047-940e-1a8fdebe76cf",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"gitToken\": \"git-token\",\n\t\t\"provider\": \"DEFAULT\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create spinnaker cd configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "258a2aad-93d6-42e0-a7e7-27909160607f",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "593213fa-b8f0-45df-8804-469da6da9e91",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"account\":\"some-account\",\n\t\"namespace\":\"some-namespace\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"SPINNAKER\",\n\t\"configurationData\": {\n\t\t\"account\": \"account\",\n\t\t\"gitAccount\": \"gitaccount\",\n\t\t\"url\": \"http://localhost:8883/spinnaker\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9803f5f9-300b-4fd5-96b7-53dd716e2fff",
								"exec": [
									"const response = JSON.parse(responseBody);",

									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete configurations",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"url": {
							"raw": "localhost:3000/configurations/cd/{{cdConfigurationId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd",
								"{{cdConfigurationId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Modules",
			"item": [
				{
					"name": "Get Modules",
					"events": [
						{
							"listen": "test",
							"script": {
								"id": "9803f5f9-300b-4fd5-96b7-53dd716e2fff",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/modules",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Module by Id",
					"events": [
							{
								"listen": "test",
								"script": {
									"id": "b13de781-ac3f-44ec-a35f-68b70419512d",
									"exec": [
										"pm.test(\"Status ok\", function() {",
										"    pm.response.to.have.status(200)",
										"})"
									],
									"type": "text/javascript"
								}
							}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/modules/{{moduleId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules",
								"{{moduleId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Deployments",
			"item": [
				{
					"name": "Create Default Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42fea2d6-f0e3-4896-b4d6-c19c331cbeaf",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c8411b9c-7c05-4089-937f-310c9f05bc09",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"applicationName\": \"{{applicationName}}\",\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"description\": \"\",\n    \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\" \n     \n}"
						},
						"url": {
							"raw": "http://localhost:3000/deployments/default",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Routed Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9a7cc0f-c8e2-491d-97fe-23f61d46a148",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "03a5d2de-7664-43ce-b1e4-f82b8ff6ca11",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"applicationName\": \"{{applicationName}}\",\n\t\"circle\": {\n\t\t\"headerValue\": \"header-value\"\n\t},\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"description\": \"\",\n    \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\"    \n}"
						},
						"url": {
							"raw": "http://localhost:3000/deployments/circle",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"circle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deployments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b18735c-4a79-41c1-96c5-b7908c890c3a",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/deployments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deployment by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2b49f39-bb39-442e-8910-acfcb7ddaf9e",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/deployments/{{deploymentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"{{deploymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Undeployment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7f96a76-1a29-41d5-9693-71d9f8615e8f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e4b51446-225d-4372-bd62-28922e9cc2b2",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"authorId\": \"{{authorId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/deployments/{{deploymentId}}/undeploy",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"{{deploymentId}}",
								"undeploy"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Components",
			"item": [
				{
					"name": "Get Component Queue by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c304c465-1ef5-4dbe-b022-f48ae27bd8f9",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"componentQueueId\", response[0][\"id\"]);",
									"",
									"",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/components/{{componentId}}/queue",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"components",
								"{{componentId}}",
								"queue"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Notify Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb29b85c-fccb-4c44-90c6-3c61c9c39502",
								"exec": [
									"pm.test(\"Status no content\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"SUCCEEDED\"\n}"
						},
						"url": {
							"raw": "http://localhost:3000/notifications/deployment?queuedDeploymentId={{componentQueueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"deployment"
							],
							"query": [
								{
									"key": "queuedDeploymentId",
									"value": "{{componentQueueId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Notify Undeployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb29b85c-fccb-4c44-90c6-3c61c9c39502",
								"exec": [
									"pm.test(\"Status no content\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"SUCCEEDED\"\n}"
						},
						"url": {
							"raw": "http://localhost:3000/notifications/undeployment?queuedUndeploymentId={{componentQueueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"undeployment"
							],
							"query": [
								{
									"key": "queuedUndeploymentId",
									"value": "{{componentQueueId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
