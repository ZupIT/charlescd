{
	"info": {
		"_postman_id": "33aba5eb-dc92-4b37-b88a-296b03c26d81",
		"name": "Charles Butler",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Configurations",
			"item": [
				{
					"name": "Create octopipe cd configuration Generic cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea8d2939-e5cf-4731-bd04-14f0cf4a7c0d",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d16c516f-5c44-40e5-a286-608acdb46b22",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"provider\": \"GENERIC\",\n\t\t\"clientCertificate\": \"cert-data\",\n\t\t\"host\": \"https://kube.cluster.com\",\n\t\t\"gitToken\": \"githubtoken\",\n\t\t\"namespace\": \"darwin\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create octopipe cd configuration EKS cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b405a88-91aa-40ea-b68a-4648a665d2b4",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ee96c84-170e-46da-b4ea-037f9c163c62",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"gitToken\": \"git-token\",\n\t\t\"provider\": \"EKS\",\n\t\t\"caData\": \"ca-data\",\n\t\t\"awsSID\": \"aws-sid\",\n\t\t\"awsSecret\": \"aws-secret\",\n\t\t\"awsRegion\": \"aws-region\",\n\t\t\"awsClusterName\": \"cluster-name\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create octopipe cd configuration DEFAULT cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "781ed0fd-ee97-4aec-96d2-118057d48985",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "482da401-6e5d-4554-b3b1-3761e5d11452",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"gitToken\": \"git-token\",\n\t\t\"provider\": \"DEFAULT\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create spinnaker cd configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23e7c9c4-12b2-4618-9693-06993b309b85",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b78a73d9-4920-426b-83b6-15bd6865a3e9",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"account\":\"some-account\",\n\t\"namespace\":\"some-namespace\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"SPINNAKER\",\n\t\"configurationData\": {\n\t\t\"account\": \"account\",\n\t\t\"gitAccount\": \"gitaccount\",\n\t\t\"url\": \"http://localhost:8883/spinnaker\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea4e15d3-d488-410d-8a3a-b1646023dcd0",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Deployments",
			"item": [
				{
					"name": "Create Default Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6154e536-2510-4841-a303-2a0186c9bfe3",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a16084d6-70e9-4f68-8d2a-2e355a7c7cf7",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"applicationName\": \"{{applicationName}}\",\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"description\": \"\",\n    \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\" \n     \n}"
						},
						"url": {
							"raw": "http://localhost:3000/deployments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Routed Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31901ef2-fd24-4a2e-ae53-ddd0233d4cea",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a56baa84-3aa7-4036-8696-61643d993d5d",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"applicationName\": \"{{applicationName}}\",\n\t\"circle\": {\n\t\t\"headerValue\": \"header-value\"\n\t},\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"description\": \"\",\n    \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\"    \n}"
						},
						"url": {
							"raw": "http://localhost:3000/deployments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deployments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a894a9b-2a04-448e-814a-5a4599f62509",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/deployments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deployment by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b81d0c24-4adb-4e35-9df1-10ec9dd850e1",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/deployments/{{deploymentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"{{deploymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Undeployment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "786acfec-95b8-48a8-8662-a120a60c6fc2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b730bf9e-e9ad-4cec-85a3-039544c487f0",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"",
									"postman.setGlobalVariable(\"componentDeploymentId\", response.modulesUndeployments[0].componentsUndeployments[0].componentDeployment)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"authorId\": \"{{authorId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/deployments/{{deploymentId}}/undeploy",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"{{deploymentId}}",
								"undeploy"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Modules",
			"item": [
				{
					"name": "Get Modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5418faf5-c90a-4201-b618-1bf519f37696",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})",
									"const response = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"moduleId\", response[0][\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/modules",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Module by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa4fb990-025b-4d00-bfef-cd50c8d28481",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/modules/{{moduleId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules",
								"{{moduleId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Components",
			"item": [
				{
					"name": "Get Component Queue by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "852e2a8b-fdb3-4e6b-8d8d-308a5bbbf469",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"componentQueueId\", response[0][\"id\"]);",
									"const componentDeployment = postman.getGlobalVariable(\"componentDeploymentId\")",
									"",
									"const undeploymentId = response.filter(e => e.componentDeploymentId === componentDeployment)",
									"postman.setGlobalVariable(\"componentUndeploymentQueueId\", undeploymentId[undeploymentId.length -1].id)",
									"",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/components/{{componentId}}/queue",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"components",
								"{{componentId}}",
								"queue"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Notify Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "953843fd-de09-4870-9fd5-88ff1aff11d9",
								"exec": [
									"pm.test(\"Status no content\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"SUCCEEDED\"\n}"
						},
						"url": {
							"raw": "http://localhost:3000/notifications/deployment?queuedDeploymentId={{componentQueueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"deployment"
							],
							"query": [
								{
									"key": "queuedDeploymentId",
									"value": "{{componentQueueId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Notify Undeployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c153020-3715-49e9-bc6f-d04cdefbb07f",
								"exec": [
									"pm.test(\"Status no content\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"SUCCEEDED\"\n}"
						},
						"url": {
							"raw": "http://localhost:3000/notifications/undeployment?queuedUndeploymentId={{componentUndeploymentQueueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"undeployment"
							],
							"query": [
								{
									"key": "queuedUndeploymentId",
									"value": "{{componentUndeploymentQueueId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Configurations Cleanup",
			"item": [
				{
					"name": "Create octopipe cd configuration Generic cluster Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22958579-3a99-4750-96e9-4632fbafb824",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aeb083f4-4673-49b0-aa0c-4bfdeff2ad71",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"provider\": \"GENERIC\",\n\t\t\"clientCertificate\": \"cert-data\",\n\t\t\"host\": \"https://kube.cluster.com\",\n\t\t\"gitToken\": \"githubtoken\",\n\t\t\"namespace\": \"darwin\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8501407-3ccd-43dd-903e-78195c94a968",
								"exec": [
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"url": {
							"raw": "localhost:3000/configurations/cd/{{cdConfigurationId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd",
								"{{cdConfigurationId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
