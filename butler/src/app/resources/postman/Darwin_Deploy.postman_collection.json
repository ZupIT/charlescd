{
	"info": {
		"_postman_id": "d9433fae-8cf7-4f75-ac2f-fb6097835b2e",
		"name": "Darwin Deploy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Configurations",
			"item": [
				{
					"name": "Create octopipe cd configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bcae68a4-7adc-4a38-abad-5d5ee76b78d0",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c63f6733-b34a-4d81-a99c-a9f90b695857",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"account\":\"some-account\",\n\t\"namespace\":\"some-namespace\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitUsername\": \"git-user\",\n\t\t\"gitPassword\": \"git-password\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create spinnaker cd configuration Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bcae68a4-7adc-4a38-abad-5d5ee76b78d0",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c63f6733-b34a-4d81-a99c-a9f90b695857",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-application-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"account\":\"some-account\",\n\t\"namespace\":\"some-namespace\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"SPINNAKER\",\n\t\"configurationData\": {\n\t\t\"account\": \"account\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Modules",
			"item": [
				{
					"name": "Create module",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "159bd805-716b-451e-ab37-04fb69a2b5c5",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('moduleId', uuid.v4());",
									"postman.setGlobalVariable('componentId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{moduleId}}\",\n    \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n    \"components\": [\n    \t{\n    \t\t\"id\": \"{{componentId}}\"\n    \t}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/modules",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Modules",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/modules",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Module by Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/modules/{{moduleId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules",
								"{{moduleId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Deployments",
			"item": [
				{
					"name": "Create Routed Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d9a4ca2-1106-4a14-9998-cca9237b2b0f",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0a0314ec-116f-44dc-9142-026c59e31ad3",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"applicationName\": \"{{applicationName}}\",\n\t\"circle\": {\n\t\t\"headerValue\": \"header-value\"\n\t},\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"description\": \"\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\",\n    \"circles\": [\n        {\n            \"headerValue\": \"val1\"\n        },\n        {\n        \t\"headerValue\": \"val2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://localhost:3000/deployments/circle",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"circle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Default Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2be80835-9e66-4f72-80e5-ed9dd5396149",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "921ac85e-b7d6-46b3-912d-e219bd89d770",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"applicationName\": \"{{applicationName}}\",\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"description\": \"\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\",\n    \"circles\": [\n        {\n            \"headerValue\": \"val1\"\n        },\n        {\n        \t\"headerValue\": \"val2\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://localhost:3000/deployments/default",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Deployment without circle",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f906e23-12b8-493c-826a-cfcab899ee4f",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "921ac85e-b7d6-46b3-912d-e219bd89d770",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"applicationName\": \"{{applicationName}}\",\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"description\": \"\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\",\n    \"circles\": [\n    \t{\n    \t\t\"headerValue\": \"val1\",\n    \t\t\"removeCircle\": true\n    \t}\t\n\t]\n}"
						},
						"url": {
							"raw": "http://localhost:3000/deployments/default",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deployments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12b278d4-eab4-4ab8-99c4-a0e117227b21",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/deployments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deployment by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "915409fc-32eb-4292-9708-ab14f69589ca",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/deployments/{{deploymentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"{{deploymentId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Components",
			"item": [
				{
					"name": "Get Component Queue by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0902a943-c2c9-4f07-bc52-9fb184ae3fab",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"componentQueueId\", response[0][\"id\"]);",
									"",
									"",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/components/{{componentId}}/queue",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"components",
								"{{componentId}}",
								"queue"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Notify Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60e0ee88-2dd6-4a04-9f01-f1e5255bad4d",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"SUCCEEDED\"\n}"
						},
						"url": {
							"raw": "http://localhost:3000/notifications/deployment?queuedDeploymentId={{componentQueueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"deployment"
							],
							"query": [
								{
									"key": "queuedDeploymentId",
									"value": "{{componentQueueId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
