{
	"info": {
		"_postman_id": "72e283db-e808-4807-8be3-48831ff8a876",
		"name": "Charles Butler",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Configurations",
			"item": [
				{
					"name": "Create octopipe cd configuration Generic cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43bcfc69-50fe-499b-ad95-a38a5550d9d9",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d7e77765-9a86-4885-8fcb-dc7e1f06b2fc",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"provider\": \"GENERIC\",\n\t\t\"clientCertificate\": \"cert-data\",\n\t\t\"host\": \"https://kube.cluster.com\",\n\t\t\"gitToken\": \"githubtoken\",\n\t\t\"namespace\": \"darwin\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create octopipe cd configuration EKS cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a3e8753-14e9-40e3-b8ef-af89bfcebb74",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "85589534-9f46-43d0-ae5c-7230e96f77e3",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"gitToken\": \"git-token\",\n\t\t\"provider\": \"EKS\",\n\t\t\"caData\": \"ca-data\",\n\t\t\"awsSID\": \"aws-sid\",\n\t\t\"awsSecret\": \"aws-secret\",\n\t\t\"awsRegion\": \"aws-region\",\n\t\t\"awsClusterName\": \"cluster-name\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create octopipe cd configuration DEFAULT cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b71077b-b4d5-4c42-8feb-a7ba41a20a35",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "71d27cf2-3181-4884-9aa1-62c9e5d43530",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"gitToken\": \"git-token\",\n\t\t\"provider\": \"DEFAULT\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create spinnaker cd configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5debe1b-37cc-4bfb-92ef-9ed2e97200d9",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "90d14211-f4b5-455f-bb48-3fc3cf5b0822",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"account\":\"some-account\",\n\t\"namespace\":\"some-namespace\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"SPINNAKER\",\n\t\"configurationData\": {\n\t\t\"account\": \"account\",\n\t\t\"gitAccount\": \"gitaccount\",\n\t\t\"url\": \"http://localhost:8883/spinnaker\",\n\t\t\"namespace\": \"namespace\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97a992a3-a573-4e97-8de6-7919ac405712",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Deployments",
			"item": [
				{
					"name": "Create Default Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8980219-4997-4214-986e-eb0583d2313a",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d50bfda-eb59-4a40-8ac9-db0ac896fe5e",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"applicationName\": \"{{applicationName}}\",\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"description\": \"\",\n    \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\" \n     \n}"
						},
						"url": {
							"raw": "http://localhost:3000/deployments/default",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Routed Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5820666d-2154-4481-b70d-3d81cfaa03c4",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"deploymentId\", response[\"id\"]);",
									"postman.setGlobalVariable(\"componentDeploymentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"id\"]);",
									"postman.setGlobalVariable(\"moduleId\", response[\"modulesDeployments\"][0][\"moduleId\"]);",
									"postman.setGlobalVariable(\"componentId\", response[\"modulesDeployments\"][0][\"componentsDeployments\"][0][\"componentId\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dceb6c0a-5a9d-4e8c-9b1d-2df8247a7aef",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('deploymentID', uuid.v4());",
									"postman.setGlobalVariable('applicationName', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"deploymentId\": \"{{deploymentID}}\",\n\t\"applicationName\": \"{{applicationName}}\",\n\t\"circle\": {\n\t\t\"headerValue\": \"header-value\"\n\t},\n    \"modules\": [\n        {\n            \"moduleId\": \"{{moduleId}}\",\n            \"helmRepository\": \"https://some-helm.repo\",\n            \"components\": [\n                {\n                    \"componentId\": \"{{componentId}}\",\n                    \"buildImageUrl\": \"imageurl.com\",\n                    \"buildImageTag\": \"tag1\",\n                    \"componentName\": \"component-name\"\n                }\n            ]\n        }\n    ],\n    \"authorId\": \"{{authorId}}\",\n    \"description\": \"\",\n    \"cdConfigurationId\": \"{{cdConfigurationId}}\",\n    \"callbackUrl\": \"http://localhost:8883/deploy/notifications/deployment\"    \n}"
						},
						"url": {
							"raw": "http://localhost:3000/deployments/circle",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"circle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deployments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43ac2087-7dd1-4238-ac09-262dde2fbf1c",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/deployments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deployment by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85a389e8-1610-489f-b0f2-9f48fc37af1f",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/deployments/{{deploymentId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"{{deploymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Undeployment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5d9dc376-91df-4d0d-b411-3cc2d163071f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "404f653f-6113-4e53-88f2-3c82804a3cdd",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"",
									"postman.setGlobalVariable(\"componentDeploymentId\", response.modulesUndeployments[0].componentsUndeployments[0].componentDeployment)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"authorId\": \"{{authorId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/deployments/{{deploymentId}}/undeploy",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"deployments",
								"{{deploymentId}}",
								"undeploy"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Modules",
			"item": [
				{
					"name": "Get Modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "704a5e2a-117b-4af1-bfca-fe59822323f7",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})",
									"const response = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"moduleId\", response[0][\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/modules",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Module by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8f9f47e-ce03-46c6-8255-e092445a204c",
								"exec": [
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/modules/{{moduleId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"modules",
								"{{moduleId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Components",
			"item": [
				{
					"name": "Get Component Queue by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8a1d4a0-71fe-419f-a169-f17aa56ca651",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"componentQueueId\", response[0][\"id\"]);",
									"const componentDeployment = postman.getGlobalVariable(\"componentDeploymentId\")",
									"",
									"const undeploymentId = response.filter(e => e.componentDeploymentId === componentDeployment)",
									"postman.setGlobalVariable(\"componentUndeploymentQueueId\", undeploymentId[undeploymentId.length -1].id)",
									"",
									"pm.test(\"Status ok\", function() {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/components/{{componentId}}/queue",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"components",
								"{{componentId}}",
								"queue"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Notify Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf340755-cce9-4e43-8bcc-c4f3ce65ea0c",
								"exec": [
									"pm.test(\"Status no content\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"SUCCEEDED\"\n}"
						},
						"url": {
							"raw": "http://localhost:3000/notifications/deployment?queuedDeploymentId={{componentQueueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"deployment"
							],
							"query": [
								{
									"key": "queuedDeploymentId",
									"value": "{{componentQueueId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Notify Undeployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0241ff24-28f0-4526-843d-00983ce65cf1",
								"exec": [
									"pm.test(\"Status no content\", function() {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"SUCCEEDED\"\n}"
						},
						"url": {
							"raw": "http://localhost:3000/notifications/undeployment?queuedUndeploymentId={{componentUndeploymentQueueId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notifications",
								"undeployment"
							],
							"query": [
								{
									"key": "queuedUndeploymentId",
									"value": "{{componentUndeploymentQueueId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Configurations Cleanup",
			"item": [
				{
					"name": "Create octopipe cd configuration Generic cluster Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1982a51a-55d1-4c4e-8f87-02f47a043405",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"const uuid = require('uuid');",
									"postman.setGlobalVariable(\"cdConfigurationId\", response[\"id\"]);",
									"",
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(201)",
									"})",
									"postman.setGlobalVariable('moduleId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3991e6f0-69ae-4ee1-bedb-8b5891cd3cfe",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"postman.setGlobalVariable('workspaceId', uuid.v4());",
									"postman.setGlobalVariable('authorId', uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-workspace-id",
								"value": "{{workspaceId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"config-name\",\n\t\"authorId\":\"{{authorId}}\",\n\t\"type\": \"OCTOPIPE\",\n\t\"configurationData\": {\n\t\t\"gitProvider\": \"GITHUB\",\n\t\t\"provider\": \"GENERIC\",\n\t\t\"clientCertificate\": \"cert-data\",\n\t\t\"host\": \"https://kube.cluster.com\",\n\t\t\"gitToken\": \"githubtoken\",\n\t\t\"namespace\": \"darwin\"\n\t}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/configurations/cd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76dbe16b-8833-4077-9578-92f48a41c089",
								"exec": [
									"pm.test(\"Status created\", function() {",
									"    pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-workspace-id",
								"type": "text",
								"value": "{{workspaceId}}"
							}
						],
						"url": {
							"raw": "localhost:3000/configurations/cd/{{cdConfigurationId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"configurations",
								"cd",
								"{{cdConfigurationId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}