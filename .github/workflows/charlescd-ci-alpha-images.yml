#
  # Copyright 2020, 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #  http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
#

name: charlescd-ci-alpha-images

on:
  push:
    branches: [ main ]

permissions: read-all

jobs:
  build_and_push_alpha_butler:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      
    - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Use Node.js 12.x
      uses: actions/setup-node@f1f314fca9dfce2769ece7d933488f076716723e
      with:
        node-version: 12.x

    - run: npm ci
      working-directory: ./butler
      
    - run: npm run build --if-present
      working-directory: ./butler
      env:
        CI: true

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_SHA)

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200
        role-session-name: MyECRSession
        role-skip-session-tagging: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: charlescd-butler
        IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
      run: |
        cd butler
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest

  build_and_push_alpha_circle_matcher:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@a766aa7b5fcc0a801fa3d4fd521ca299c03c9c00
        with:
          graalvm-version: '21.0.0.java11'
      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('./circle-matcher/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: ./circle-matcher
        run: mvn -B clean install -Djfr.unsupported.vm=true

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_SHA)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyECRSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-circle-matcher
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
          cd circle-matcher
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest

  build_and_push_alpha_compass:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57
        with:
          go-version: "^1.14.2"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_SHA)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyECRSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-compass
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
          cd compass
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest

  build_and_push_alpha_gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57
        with:
          go-version: "^1.14.2"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_SHA)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyECRSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-gate
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
          cd gate
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest

  build_and_push_alpha_hermes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57
        with:
          go-version: "^1.14.2"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_SHA)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyECRSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-hermes
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
          cd hermes
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest

  build_and_push_alpha_moove:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      
    - name: Set up JDK 1.11
      uses: actions/setup-java@d202f5dbf7256730fb690ec59f6381650114feb2
      with:
        java-version: 1.11

    - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('./moove/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build with Maven
      working-directory: ./moove
      run: mvn -B clean install

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_SHA)

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200
        role-session-name: MyECRSession
        role-skip-session-tagging: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: charlescd-moove
        IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
      run: |
        cd moove/web
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest

  build_and_push_alpha_ui:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      
    - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Use Node.js 12.x
      uses: actions/setup-node@f1f314fca9dfce2769ece7d933488f076716723e
      with:
        node-version: 12.x

    - run: npm ci
      working-directory: ./ui
    - run: npm run build
      working-directory: ./ui
      env:
        CI: true

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_SHA)
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200
        role-session-name: MyECRSession
        role-skip-session-tagging: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: charlescd-ui
        IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
      run: |
        cd ui
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest

  build_and_push_alpha_villager:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      
    - name: Set up JDK 1.11
      uses: actions/setup-java@d202f5dbf7256730fb690ec59f6381650114feb2
      with:
        java-version: 1.11

    - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('./villager/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build with Maven
      working-directory: ./villager
      run: mvn -B clean install

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_SHA)
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200
        role-session-name: MyECRSession
        role-skip-session-tagging: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: charlescd-villager
        IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
      run: |
        cd villager
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha-latest

  notify-team:
    runs-on: ubuntu-latest
    needs: [ build_and_push_alpha_butler,
             build_and_push_alpha_circle_matcher,
             build_and_push_alpha_moove,
             build_and_push_alpha_ui,
             build_and_push_alpha_villager,
             build_and_push_alpha_compass,
             build_and_push_alpha_gate,
             build_and_push_alpha_hermes
    ]
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_SHA)
        
      - name: ping
        run: |
          curl -X POST -H "Content-Type: Application/json" -d '{"text":"New alpha images builded with tag: alpha-${{ steps.get_version.outputs.VERSION }} and alpha-latest"}' ${{ secrets.GCHAT_SRE_WEBHOOK }}
