#
  # Copyright 2020, 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #  http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
#

name: charlescd-release

on:
  release:
    types:
      - released
    branches: [ main ]

permissions: read-all

jobs:
  build_and_push_release_butler:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - uses: actions/cache@afc669e7fce1370457d4c97e4ce71cd7b277760f
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js 12.x
        uses: actions/setup-node@f1f314fca9dfce2769ece7d933488f076716723e
        with:
          node-version: 12.x

      - run: npm ci
        working-directory: ./butler

      - run: npm run build --if-present
        working-directory: ./butler
        env:
          CI: true

      - name: Build and push Docker images
        uses: docker/build-push-action@e5e36c4a4e2085c523c6fb6a553b8d00c30c1716
        with:
          path: ./butler
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
          repository: zupcharles/charlescd-butler
          dockerfile: ./butler/Dockerfile
          tags: latest,${{ steps.get_version.outputs.VERSION }}
          tag_with_ref: false
          tag_with_sha: false

  build_and_push_release_circle_matcher:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@a766aa7b5fcc0a801fa3d4fd521ca299c03c9c00
        with:
          graalvm-version: '21.0.0.java11'
      - uses: actions/cache@afc669e7fce1370457d4c97e4ce71cd7b277760f
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('./circle-matcher/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: ./circle-matcher
        run: mvn -B clean install -Djfr.unsupported.vm=true

      - name: Build and push Docker images
        uses: docker/build-push-action@e5e36c4a4e2085c523c6fb6a553b8d00c30c1716
        with:
          path: ./circle-matcher
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
          repository: zupcharles/charlescd-circle-matcher
          dockerfile: ./circle-matcher/Dockerfile
          tags: latest,${{ steps.get_version.outputs.VERSION }}
          tag_with_ref: false
          tag_with_sha: false

  build_and_push_release_moove:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Set up JDK 1.11
        uses: actions/setup-java@3bc31aaf88e8fc94dc1e632d48af61be5ca8721c
        with:
          java-version: 1.11

      - uses: actions/cache@afc669e7fce1370457d4c97e4ce71cd7b277760f
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('./moove/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: ./moove
        run: mvn -B clean install

      - name: Build and push Docker images
        uses: docker/build-push-action@e5e36c4a4e2085c523c6fb6a553b8d00c30c1716
        with:
          path: ./moove/web
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
          repository: zupcharles/charlescd-moove
          dockerfile: ./moove/web/Dockerfile
          tags: latest,${{ steps.get_version.outputs.VERSION }}
          tag_with_ref: false
          tag_with_sha: false

  build_and_push_release_ui:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - uses: actions/cache@afc669e7fce1370457d4c97e4ce71cd7b277760f
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js 12.x
        uses: actions/setup-node@f1f314fca9dfce2769ece7d933488f076716723e
        with:
          node-version: 12.x

      - run: npm ci
        working-directory: ./ui
      - run: npm run build
        working-directory: ./ui
        env:
          CI: true

      - name: Build and push Docker images
        uses: docker/build-push-action@e5e36c4a4e2085c523c6fb6a553b8d00c30c1716
        with:
          path: ./ui
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
          repository: zupcharles/charlescd-ui
          dockerfile: ./ui/Dockerfile
          tags: latest,${{ steps.get_version.outputs.VERSION }}
          tag_with_ref: false
          tag_with_sha: false

  build_and_push_release_villager:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Set up JDK 1.11
        uses: actions/setup-java@3bc31aaf88e8fc94dc1e632d48af61be5ca8721c
        with:
          java-version: 1.11

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - uses: actions/cache@afc669e7fce1370457d4c97e4ce71cd7b277760f
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('./villager/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: ./villager
        run: mvn -B clean install

      - name: Build and push Docker images
        uses: docker/build-push-action@e5e36c4a4e2085c523c6fb6a553b8d00c30c1716
        with:
          path: ./villager
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
          repository: zupcharles/charlescd-villager
          dockerfile: ./villager/Dockerfile
          tags: latest,${{ steps.get_version.outputs.VERSION }}
          tag_with_ref: false
          tag_with_sha: false

  build_and_push_release_compass:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - uses: actions/cache@afc669e7fce1370457d4c97e4ce71cd7b277760f
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57
        with:
          go-version: '^1.14.2'

      - name: Build and push Docker images
        uses: docker/build-push-action@e5e36c4a4e2085c523c6fb6a553b8d00c30c1716
        with:
          path: ./compass
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
          repository: zupcharles/charlescd-compass
          dockerfile: ./compass/Dockerfile
          tags: latest,${{ steps.get_version.outputs.VERSION }}
          tag_with_ref: false
          tag_with_sha: false

  build_and_push_release_hermes:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - uses: actions/cache@afc669e7fce1370457d4c97e4ce71cd7b277760f
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57
      with:
        go-version: '1.15'

    - name: Build and push Docker images
      uses: docker/build-push-action@e5e36c4a4e2085c523c6fb6a553b8d00c30c1716
      with:
        path: ./hermes
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}
        repository: zupcharles/charlescd-hermes
        dockerfile: ./hermes/Dockerfile
        tags: latest,${{ steps.get_version.outputs.VERSION }}
        tag_with_ref: false
        tag_with_sha: false
    
  build_and_push_release_gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - uses: actions/cache@afc669e7fce1370457d4c97e4ce71cd7b277760f
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57
        with:
          go-version: '1.15'

      - name: Build and push Docker images
        uses: docker/build-push-action@e5e36c4a4e2085c523c6fb6a553b8d00c30c1716
        with:
          path: ./gate
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
          repository: zupcharles/charlescd-gate
          dockerfile: ./gate/Dockerfile
          tags: latest,${{ steps.get_version.outputs.VERSION }}
          tag_with_ref: false
          tag_with_sha: false

  build_and_push_release_matcher_s3_sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - uses: actions/cache@afc669e7fce1370457d4c97e4ce71cd7b277760f
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js 12.x
        uses: actions/setup-node@f1f314fca9dfce2769ece7d933488f076716723e
        with:
          node-version: 12.x

      - run: npm ci
        working-directory: ./utils/matcher-s3-sync

      - run: npm run build --if-present
        working-directory: ./utils/matcher-s3-sync
        env:
          CI: true

      - name: Build and push Docker images
        uses: docker/build-push-action@e5e36c4a4e2085c523c6fb6a553b8d00c30c1716
        with:
          path: ./utils/matcher-s3-sync
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
          repository: zupcharles/matcher-s3-sync
          dockerfile: ./utils/matcher-s3-sync/Dockerfile
          tags: latest,${{ steps.get_version.outputs.VERSION }}
          tag_with_ref: false
          tag_with_sha: false

  deploy:
    runs-on: ubuntu-latest
    needs: [ build_and_push_release_butler,
             build_and_push_release_circle_matcher,
             build_and_push_release_moove,
             build_and_push_release_ui,
             build_and_push_release_villager,
             build_and_push_release_compass,
             build_and_push_release_hermes,
             build_and_push_release_gate
    ]
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          ref: main

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Update charts
        run: |
          mv ./install/helm-chart/Chart.yaml ./install/helm-chart/Chart.old.yaml &&
          cat ./install/helm-chart/Chart.old.yaml | grep -v appVersion > ./install/helm-chart/Chart.yaml &&
          echo -e "appVersion: ${{ steps.get_version.outputs.VERSION }}" >> ./install/helm-chart/Chart.yaml &&
          rm -f ./install/helm-chart/Chart.old.yaml &&
          cat ./install/helm-chart/Chart.yaml

      - name: Update helm dependencies
        uses: WyriHaximus/github-action-helm3@009a012cceae416b5b94bb80bf373a472b9a8d63
        with:
          exec: helm dependency update ./install/helm-chart

#      - name: Generate single file
#        uses: WyriHaximus/github-action-helm3@v2.1.3
#        with:
#          exec: helm template charlescd -n charles ./install/helm-chart > ./install/helm-chart/single-file.yaml

      - name: Running changelog generator
        uses: actions/setup-node@f1f314fca9dfce2769ece7d933488f076716723e
        with:
          node-version: 12.x

      - run: |
          npm install github-release-notes -g
          gren release --override
          gren changelog --override
        env:
          GREN_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit updated chart and changelog file
        run: |
          git config --global user.name 'Charles CD Bot'
          git config --global user.email 'charlescdbot@users.noreply.github.com'
          git commit -sam "Automated updated chart and changelog file"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@4d3b0a48efaa29be1a91dbe756c93798daf406d5
        continue-on-error: true
        with:
          title: CI Update of charts and changelog
          commit-message: |
            auto generated PR
            Signed-off-by: Charles CD Bot <charlescdbot@users.noreply.github.com>

      - name: Zup Settings dev
        run: |
          cat <<-EOF > values-charles-dev.yaml
          ${{ secrets.VALUES_CHARLES_DEV }}
          EOF
          cat <<-EOF > ./install/helm-chart/templates/nginx-cert.yaml
          ${{ secrets.NGINX_CERT }}
          EOF

  sign-artifacts:
    runs-on: ubuntu-latest
    outputs:
      gpg-fingerprint: ${{ steps.import-gpg.outputs.fingerprint }}
    needs: deploy
    steps:
      - name: Import GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@8c43807e82148a7bafc633cc9584d04bf54be8d0 # v3.1.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Signs release artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import-gpg.outputs.fingerprint }}
          TARBALL_URL: ${{ github.event.repository.html_url }}/archive/refs/tags/${{ github.event.release.tag_name }}.tar.gz
          ZIPBALL_URL: ${{ github.event.repository.html_url }}/archive/refs/tags/${{ github.event.release.tag_name }}.zip
          FILE_NAME: ${{ github.event.repository.name }}-${{ github.event.release.tag_name }}
          UPLOAD_URL: ${{ github.event.release.upload_url }}
        run: |
          set -e; set -x
          UPLOAD_URL=$(echo $UPLOAD_URL | cut -d '{' -f1)
          curl -sSL "${TARBALL_URL}" --output "${FILE_NAME}.tar.gz"
          curl -sSL "${ZIPBALL_URL}" --output "${FILE_NAME}.zip"
          sha256sum "${FILE_NAME}.tar.gz" >> checksums.txt
          sha256sum "${FILE_NAME}.zip" >> checksums.txt
          gpg --batch -u ${GPG_FINGERPRINT} --output "checksums.txt.sig" --detach-sign "checksums.txt"
          curl -sSL "${UPLOAD_URL}?name=checksums.txt.sig" \
            -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: $(file -b --mime-type "checksums.txt.sig")" \
            --data-binary @checksums.txt.sig
          curl -sSL "${UPLOAD_URL}?name=checksums.txt" \
            -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: $(file -b --mime-type "checksums.txt")" \
            --data-binary @checksums.txt

  check-signature:
    runs-on: ubuntu-latest
    needs: sign-artifacts
    steps:
      - name: Verify the signature
        env:
          GPG_FINGERPRINT: ${{ needs.sign-artifacts.outputs.gpg-fingerprint }}
          ZIPBALL_URL: ${{ github.event.repository.html_url }}/archive/refs/tags/${{ github.event.release.tag_name }}.zip
          TARBALL_URL: ${{ github.event.repository.html_url }}/archive/refs/tags/${{ github.event.release.tag_name }}.tar.gz
          FILE_NAME: ${{ github.event.repository.name }}-${{ github.event.release.tag_name }}
          DOWNLOADS_URL: ${{ github.event.repository.html_url }}/releases/download/${{ github.event.release.tag_name }}
        run: |
          set -e; set -x
          curl -sSL ${TARBALL_URL} --output ${FILE_NAME}.tar.gz
          curl -sSL ${ZIPBALL_URL} --output ${FILE_NAME}.zip
          curl -sSL ${DOWNLOADS_URL}/checksums.txt.sig --output checksums.txt.sig
          curl -sSL ${DOWNLOADS_URL}/checksums.txt --output checksums.txt
          gpg --keyserver keys.openpgp.org --recv-keys ${GPG_FINGERPRINT}
          gpg --verify checksums.txt.sig checksums.txt
          sha256sum --check --ignore-missing checksums.txt
