#
  # Copyright 2020, 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #  http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
#

name: charlescd-cicd-staging

# Charles branchs of beta images, pre-release must have name in format of version starting at patch .0 charlescd-release-<VERSION>.0
# ex: charlescd-release-1.1.0
on:
  push:
    branches: [ charlescd-release-*.0 ]

permissions: read-all

jobs:
  build_and_push_beta_butler:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js 12.x
        uses: actions/setup-node@f1f314fca9dfce2769ece7d933488f076716723e
        with:
          node-version: 12.x

      - run: npm ci
        working-directory: ./butler

      - run: npm run build --if-present
        working-directory: ./butler
        env:
          CI: true

      - name: Get Major Version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "-" -f 3)

      - name: Get Hash Version
        id: get_hash_version
        run: echo ::set-output name=HASH_VERSION::$(echo $(echo $GITHUB_SHA |cut -c1-7))

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyLambdaSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-butler
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }}
        run: |
          cd butler
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest

  build_and_push_beta_circle_matcher:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@a766aa7b5fcc0a801fa3d4fd521ca299c03c9c00
        with:
          graalvm-version: '21.0.0.java11'
      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('./circle-matcher/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: ./circle-matcher
        run: mvn -B clean install -Djfr.unsupported.vm=true

      - name: Get Major Version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "-" -f 3)

      - name: Get Hash Version
        id: get_hash_version
        run: echo ::set-output name=HASH_VERSION::$(echo $(echo $GITHUB_SHA |cut -c1-7))

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyLambdaSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-circle-matcher
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }}
        run: |
          cd circle-matcher
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest

  build_and_push_beta_compass:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57
        with:
          go-version: "^1.14.2"

      - name: Get Major Version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "-" -f 3)

      - name: Get Hash Version
        id: get_hash_version
        run: echo ::set-output name=HASH_VERSION::$(echo $(echo $GITHUB_SHA |cut -c1-7))

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyLambdaSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-compass
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }}
        run: |
          cd compass
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest

  build_and_push_beta_moove:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Set up JDK 1.11
        uses: actions/setup-java@d202f5dbf7256730fb690ec59f6381650114feb2
        with:
          java-version: 1.11

      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('./moove/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: ./moove
        run: mvn -B clean install

      - name: Get Major Version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "-" -f 3)

      - name: Get Hash Version
        id: get_hash_version
        run: echo ::set-output name=HASH_VERSION::$(echo $(echo $GITHUB_SHA |cut -c1-7))

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyLambdaSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-moove
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }}
        run: |
          cd moove/web
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest

  build_and_push_beta_ui:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js 12.x
        uses: actions/setup-node@f1f314fca9dfce2769ece7d933488f076716723e
        with:
          node-version: 12.x

      - run: npm ci
        working-directory: ./ui
      - run: npm run build
        working-directory: ./ui
        env:
          CI: true

      - name: Get Major Version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "-" -f 3)

      - name: Get Hash Version
        id: get_hash_version
        run: echo ::set-output name=HASH_VERSION::$(echo $(echo $GITHUB_SHA |cut -c1-7))
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyLambdaSession
          role-skip-session-tagging: true
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-ui
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }}
        run: |
          cd ui
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest

  build_and_push_beta_villager:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Set up JDK 1.11
        uses: actions/setup-java@d202f5dbf7256730fb690ec59f6381650114feb2
        with:
          java-version: 1.11

      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('./villager/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: ./villager
        run: mvn -B clean install

      - name: Get Major Version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "-" -f 3)

      - name: Get Hash Version
        id: get_hash_version
        run: echo ::set-output name=HASH_VERSION::$(echo $(echo $GITHUB_SHA |cut -c1-7))

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyLambdaSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-villager
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }}
        run: |
          cd villager
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest

  build_and_push_beta_hermes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57
        with:
          go-version: "1.15"

      - name: Get Major Version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "-" -f 3)

      - name: Get Hash Version
        id: get_hash_version
        run: echo ::set-output name=HASH_VERSION::$(echo $(echo $GITHUB_SHA |cut -c1-7))

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyLambdaSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-hermes
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }}
        run: |
          cd hermes
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest

  build_and_push_beta_gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57
        with:
          go-version: "1.15"

      - name: Get Major Version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "-" -f 3)

      - name: Get Hash Version
        id: get_hash_version
        run: echo ::set-output name=HASH_VERSION::$(echo $(echo $GITHUB_SHA |cut -c1-7))

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyLambdaSession
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: charlescd-gate
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }}
        run: |
          cd gate
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:beta-latest

  deploy_staging:
    runs-on: ubuntu-latest
    needs: [ build_and_push_beta_butler,
             build_and_push_beta_circle_matcher,
             build_and_push_beta_moove,
             build_and_push_beta_ui,
             build_and_push_beta_villager,
             build_and_push_beta_compass,
             build_and_push_beta_hermes,
             build_and_push_beta_gate
    ]
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          ref: charlescd-release-1.0.0

      - name: Get Major Version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "-" -f 3)

      - name: Get Hash Version
        id: get_hash_version
        run: echo ::set-output name=HASH_VERSION::$(echo $(echo $GITHUB_SHA |cut -c1-7))

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: MyLambdaSession
          role-skip-session-tagging: true


      - name: Invoke lambda function to deploy main env
        run: |
          aws lambda invoke --function-name main-release \
          --invocation-type RequestResponse \
          --cli-binary-format raw-in-base64-out \
          --payload '{ "VERSION": "beta-${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }}", "CLUSTER": "${{ secrets.MAIN_CLUSTER }}" }' response.json

      - name: Invoke lambda function to deploy butler in sandbox env
        run: |
          aws lambda invoke --function-name main-release \
          --invocation-type RequestResponse \
          --cli-binary-format raw-in-base64-out \
          --payload '{ "VERSION": "beta-${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }}", "BUTLER_DEPLOY": true, "CLUSTER": "${{ secrets.SANDBOX_CLUSTER }}" }' response.json

  notify-team:
    runs-on: ubuntu-latest
    needs: [ deploy_staging ]
    steps:
      - name: Get Major Version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "-" -f 3)

      - name: Get Hash Version
        id: get_hash_version
        run: echo ::set-output name=HASH_VERSION::$(echo $(echo $GITHUB_SHA |cut -c1-7))

      - name: ping
        run: |
          curl -X POST -H "Content-Type: Application/json" -d '{"text":"New beta release applied on Staging, beta images builded with tag: beta-${{ steps.get_version.outputs.VERSION }}-${{ steps.get_hash_version.outputs.HASH_VERSION }} and beta-latest"}' ${{ secrets.GCHAT_SRE_WEBHOOK }}
