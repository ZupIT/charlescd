name: charlescd-prodrelease

on:
  release:
    types:
      - created
    branches: [ master ]

jobs:
  build_and_push_release_butler:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - run: npm ci
      working-directory: ./butler
      
    - run: npm run build --if-present
      working-directory: ./butler
      env:
        CI: true

    - name: Build and push Docker images
      uses: docker/build-push-action@v1.0.1
      with:
        path: ./butler
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}
        repository: zupcharles/charlescd-butler
        dockerfile: ./butler/Dockerfile
        tags: latest,${{ steps.get_version.outputs.VERSION }}
        tag_with_ref: false
        tag_with_sha: false

  build_and_push_release_circle_matcher:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('./circle-matcher/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build with Maven
      working-directory: ./circle-matcher
      run: mvn -B clean install

    - name: Build and push Docker images
      uses: docker/build-push-action@v1.0.1
      with:
        path: ./circle-matcher
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}
        repository: zupcharles/charlescd-circle-matcher
        dockerfile: ./circle-matcher/Dockerfile
        tags: latest,${{ steps.get_version.outputs.VERSION }}
        tag_with_ref: false
        tag_with_sha: false

  build_and_push_release_moove:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('./moove/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build with Maven
      working-directory: ./moove
      run: mvn -B clean install

    - name: Build and push Docker images
      uses: docker/build-push-action@v1.0.1
      with:
        path: ./moove/web
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}
        repository: zupcharles/charlescd-moove
        dockerfile: ./moove/web/Dockerfile
        tags: latest,${{ steps.get_version.outputs.VERSION }}
        tag_with_ref: false
        tag_with_sha: false

  build_and_push_release_octopipe:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.14.2'

    - name: Build and push Docker images
      uses: docker/build-push-action@v1.0.1
      with:
        path: ./octopipe
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}
        repository: zupcharles/charlescd-octopipe
        dockerfile: ./octopipe/cmd/octopipe/Dockerfile
        tags: latest,${{ steps.get_version.outputs.VERSION }}
        tag_with_ref: false
        tag_with_sha: false

  build_and_push_release_ui:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - run: npm install
      working-directory: ./ui
    - run: npm run build
      working-directory: ./ui
      env:
        CI: true

    - name: Build and push Docker images
      uses: docker/build-push-action@v1.0.1
      with:
        path: ./ui
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}
        repository: zupcharles/charlescd-ui
        dockerfile: ./ui/Dockerfile
        tags: latest,${{ steps.get_version.outputs.VERSION }}
        tag_with_ref: false
        tag_with_sha: false

  build_and_push_release_villager:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Get the version 
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('./villager/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build with Maven
      working-directory: ./villager
      run: mvn -B clean install

    - name: Build and push Docker images
      uses: docker/build-push-action@v1.0.1
      with:
        path: ./villager
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}
        repository: zupcharles/charlescd-villager
        dockerfile: ./villager/Dockerfile
        tags: latest,${{ steps.get_version.outputs.VERSION }}
        tag_with_ref: false
        tag_with_sha: false

  deploy:
    runs-on: ubuntu-latest
    needs: [ build_and_push_release_butler, 
             build_and_push_release_circle_matcher, 
             build_and_push_release_moove, 
             build_and_push_release_octopipe, 
             build_and_push_release_ui, 
             build_and_push_release_villager
    ]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: master

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: Update charts
      run: |
        mv ./install/helm-chart/Chart.yaml ./install/helm-chart/Chart.old.yaml &&
        cat ./install/helm-chart/Chart.old.yaml | grep -v appVersion > ./install/helm-chart/Chart.yaml &&
        echo -e "\r\nappVersion: ${{ steps.get_version.outputs.VERSION }}\r\n" >> ./install/helm-chart/Chart.yaml &&
        cat ./install/helm-chart/Chart.yaml &&
        sed -i -E "s/(zupcharles\/.*:)(.*)/\1${{ steps.get_version.outputs.VERSION }}/" ./install/helm-chart/values.yaml

    - name: Generate single file
      uses: WyriHaximus/github-action-helm3@v1.0.0
      with:
        exec: helm template charlescd -n charles ./install/helm-chart > ./install/helm-chart/single-file.yaml

    - name: Commit Chart updated
      run: |
        git config --global user.name 'Charles CD Bot'
        git config --global user.email 'charlescdbot@users.noreply.github.com'
        git commit -sam "Automated chart update"
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v2
      with:
        title: CI Update of charts
        commit-message: |
          auto generated PR
          Signed-off-by: Charles CD Bot <charlescdbot@users.noreply.github.com>

    - name: Zup Settings
      run: |
        sed -i -E "s/(charles\.info\.example)/${{ secrets.HOST }}/" ./install/helm-chart/values.yaml &&
        sed -i -E "s/(charlescd-postgresql)/${{ secrets.PG_HOST }}/" ./install/helm-chart/values.yaml &&
        sed -i -E "s/(charlescd-postgresql)/${{ secrets.PG_HOST }}/" ./install/helm-chart/charts/keycloak/values.yaml &&
        sed -i -E "/postgresql:/N;s/(postgresql:.*enabled: )(true)/\1false/" ./install/helm-chart/values.yaml
    - name: Deploy
      uses: WyriHaximus/github-action-helm3@v1.0.0
      with:
        exec: helm upgrade charlescd ./install/helm-chart/ --install --wait --atomic --namespace=charles --values=./install/helm-chart/values.yaml
        kubeconfig: '${{ secrets.KUBECONFIG }}'
