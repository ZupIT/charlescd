// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ZupIT/charlescd/gate/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// WorkspaceRepository is an autogenerated mock type for the WorkspaceRepository type
type WorkspaceRepository struct {
	mock.Mock
}

// FindByIds provides a mock function with given fields: workspaceIds
func (_m *WorkspaceRepository) FindByIds(workspaceIds []string) ([]domain.SimpleWorkspace, error) {
	ret := _m.Called(workspaceIds)

	var r0 []domain.SimpleWorkspace
	if rf, ok := ret.Get(0).(func([]string) []domain.SimpleWorkspace); ok {
		r0 = rf(workspaceIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SimpleWorkspace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(workspaceIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBySystemTokenId provides a mock function with given fields: systemTokenId
func (_m *WorkspaceRepository) FindBySystemTokenId(systemTokenId string) ([]domain.SimpleWorkspace, error) {
	ret := _m.Called(systemTokenId)

	var r0 []domain.SimpleWorkspace
	if rf, ok := ret.Get(0).(func(string) []domain.SimpleWorkspace); ok {
		r0 = rf(systemTokenId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SimpleWorkspace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(systemTokenId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPermissionAtWorkspace provides a mock function with given fields: workspaceId, userId
func (_m *WorkspaceRepository) GetUserPermissionAtWorkspace(workspaceId string, userId string) ([][]domain.Permission, error) {
	ret := _m.Called(workspaceId, userId)

	var r0 [][]domain.Permission
	if rf, ok := ret.Get(0).(func(string, string) [][]domain.Permission); ok {
		r0 = rf(workspaceId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]domain.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(workspaceId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
